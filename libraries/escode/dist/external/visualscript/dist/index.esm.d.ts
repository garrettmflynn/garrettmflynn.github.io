export var App: {
    new (props?: {}): {
        name: any;
        type: string;
        parent: ParentNode;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        controls: any;
        on: any;
        off: any;
        addControl: (instance: any) => void;
        delete: (fromParent?: boolean) => void;
        updated: () => void;
        close: any;
        dashboard: Element;
        toggle: {
            grow: any;
            select: (toggles: any) => void;
            selected: any;
            updated: () => void;
            bar: any;
            to: any;
            close: any;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        willUpdate(changedProps: any): void;
        controlPanel: HTMLDivElement;
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        name: {
            type: StringConstructor;
            reflect: boolean;
        };
        controls: {
            type: ArrayConstructor;
            reflect: boolean;
        };
        on: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        close: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        type: {
            type: StringConstructor;
            reflect: boolean;
        };
        off: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Button: {
    new (props?: {}): {
        primary: any;
        backgroundColor: any;
        size: any;
        onClick: any;
        willUpdate(_2: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        primary: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        backgroundColor: {
            type: StringConstructor;
            reflect: boolean;
        };
        size: {
            type: StringConstructor;
            reflect: boolean;
        };
        onClick: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var CodeEditor: {
    new (props?: {}): {
        div: HTMLDivElement;
        textArea: HTMLTextAreaElement;
        updated: () => void;
        monaco: any;
        value: any;
        onInput: any;
        onSave: any;
        onReset: any;
        onClose: any;
        willUpdate(changedProps: any): void;
        render(): HTMLDivElement;
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        value: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Control: {
    new (props?: {}): {
        label: any;
        type: any;
        persist: any;
        options: any;
        onChange: any;
        getElement: () => void;
        element: {
            primary: any;
            backgroundColor: any;
            size: any;
            onClick: any;
            willUpdate(_2: any): void;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        } | {
            value: any;
            outline: any;
            disabled: any;
            label: any;
            persist: any;
            onChange: any;
            onInput: any;
            willUpdate(changedProps: any): void;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        } | {
            persist: any;
            optionChecked: string;
            optionHoveredIndex: number;
            options: any;
            onChange: any;
            add: (option: any) => void;
            openSelectCustom: () => void;
            closeSelectCustom: () => void;
            updateCustomSelectHovered: (newIndex: any) => void;
            updateCustomSelectChecked: (value: any, text2: any) => void;
            watchClickOutside: (e8: any) => void;
            supportKeyboardNavigation: (e8: any) => void;
            value: any;
            label: any;
            willUpdate(changedProps: any): void;
            updated(changedProperties: any): void;
            optionsCount: number;
            elements: {
                elSelectNative: Element;
                elSelectCustom: Element;
                elSelectCustomOpts: Element;
                customOptsList: Element[];
            };
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        } | {
            onChange: any;
            accept: any;
            webkitdirectory: any;
            directory: any;
            multiple: any;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        } | {
            persist: any;
            onChange: any;
            value: any;
            label: any;
            willUpdate(changedProps: any): void;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        } | {
            persist: any;
            value: any;
            min: any;
            max: any;
            onChange: any;
            onInput: () => void;
            label: any;
            willUpdate(changedProps: any): void;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        willUpdate: (changedProps: any) => void;
        park: any;
        value: any;
        accept: any;
        webkitdirectory: any;
        directory: any;
        multiple: any;
        onClick: any;
        primary: any;
        backgroundColor: any;
        size: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        updated(changedProperties: any): void;
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        label: {
            type: StringConstructor;
            reflect: boolean;
        };
        type: {
            type: StringConstructor;
            reflect: boolean;
        };
        persist: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        park: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        value: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        options: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        onChange: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        accept: {
            type: StringConstructor;
            reflect: boolean;
        };
        webkitdirectory: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        directory: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        multiple: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        primary: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        backgroundColor: {
            type: StringConstructor;
            reflect: boolean;
        };
        size: {
            type: StringConstructor;
            reflect: boolean;
        };
        onClick: {
            type: ObjectConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Dashboard: {
    new (props?: {}): {
        apps: Map<any, any>;
        open: any;
        closeHandler: any;
        toggletext: any;
        toggle: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        main: Element;
        footer: Element;
        nav: Element;
        sidebar: Element;
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        toggletext: {
            type: StringConstructor;
            reflect: boolean;
        };
        toggle: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        open: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        closeHandler: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        global: {
            type: BooleanConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var DeviceEditor: {
    new (props?: {
        target: {};
        header: string;
    }): {
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {};
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var File: {
    new (props?: {}): {
        onChange: any;
        accept: any;
        webkitdirectory: any;
        directory: any;
        multiple: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        accept: {
            type: StringConstructor;
            reflect: boolean;
        };
        onChange: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        webkitdirectory: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        directory: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        multiple: {
            type: BooleanConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Footer: {
    new (props?: {}): {
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {};
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Gallery: {
    new (props?: {}): {
        things: any[];
        search: any;
        load: (thing: any, i7: any) => {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        getThings: () => any[];
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {};
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var GraphEditor: {
    new (props: any): {
        history: any[];
        set: (graph: any) => Promise<void>;
        graph: any;
        keys: string[];
        getElement: (key: any, o8: any) => Promise<{
            _$litType$: any;
            strings: any;
            values: any[];
        }>;
        workspace: {
            updateCount: number;
            context: {
                scale: number;
            };
            editing: {
                svgInfo: {
                    size: number;
                    radius: number;
                };
                link: (info: any) => Promise<boolean>;
                toResolve: {
                    type: any;
                    listeners: {
                        name: string;
                        function: (e8: any) => void;
                    }[];
                    callback: any;
                };
                getOtherType: (type: any) => "input" | "output";
                updated: () => Promise<void>;
                element: SVGSVGElement;
                workspace: any;
                box: {
                    xMin: number;
                    xMax: number;
                    yMin: number;
                    yMax: number;
                };
                node: {
                    p1: any;
                    p2: any;
                    c1: any;
                    c2: any;
                    c3: any;
                    l1: any;
                    l2: any;
                    curve: any;
                };
                getEdgeName: ({ input, output }?: {
                    input: any;
                    output: any;
                }) => string;
                resolveIO: (el: any, typeNeeded: any, callback: any, origin: any) => Promise<boolean>;
                firstUp: boolean;
                mouseAsTarget: (type: any, upCallback: any) => void;
                init: () => Promise<any>;
                insert: () => Promise<any>;
                _activate: () => Promise<void>;
                dragHandler: (event: any) => void;
                drag: {
                    node: any;
                    start: {
                        x: number;
                        y: number;
                    };
                    cursor: DOMPoint;
                };
                svgPoint: (svg2: any, x2: any, y2: any) => DOMPoint;
                updateElement: (element: any, attr: any) => void;
                getControlPoint: (circle: any) => {
                    x: number;
                    y: number;
                };
                updateControlPoints: (p1: any, p2: any) => void;
                drawCurve: () => void;
                addReactivity: () => void;
                _onMouseOverEdge: () => void;
                _onMouseOutEdge: () => void;
                _onClickEdge: () => void;
                deinit: () => void;
                resize: () => void;
                output: any;
                input: any;
                ready: Promise<any>;
                resolveReady: {
                    resolve: (arg: any) => void;
                    reject: (reason?: any) => void;
                };
                id: string;
                render(): {
                    _$litType$: any;
                    strings: any;
                    values: any[];
                };
                renderOptions: {
                    host: any;
                };
                createRenderRoot(): ShadowRoot;
                update(t5: any): void;
                _$Dt: any;
                connectedCallback(): void;
                disconnectedCallback(): void;
                _$Et: Map<any, any>;
                isUpdatePending: boolean;
                hasUpdated: boolean;
                _$Ei: any;
                o(): void;
                _$Ep: Promise<any>;
                enableUpdating(t5: any): void;
                _$AL: Map<any, any>;
                addController(t5: any): void;
                _$Eg: any[];
                removeController(t5: any): void;
                _$Em(): void;
                renderRoot: ShadowRoot;
                attributeChangedCallback(t5: any, i7: any, s6: any): void;
                _$ES(t5: any, i7: any, s6?: {
                    attribute: boolean;
                    type: StringConstructor;
                    converter: {
                        toAttribute(t5: any, i7: any): any;
                        fromAttribute(t5: any, i7: any): any;
                    };
                    reflect: boolean;
                    hasChanged: (t5: any, i7: any) => boolean;
                }): void;
                _$AK(t5: any, i7: any): void;
                requestUpdate(t5: any, i7: any, s6: any): void;
                _$EC: Map<any, any>;
                _$E_(): Promise<boolean>;
                scheduleUpdate(): void;
                performUpdate(): void;
                willUpdate(t5: any): void;
                _$AE(t5: any): void;
                _$EU(): void;
                readonly updateComplete: Promise<any>;
                getUpdateComplete(): Promise<any>;
                shouldUpdate(t5: any): boolean;
                firstUpdated(t5: any): void;
                accessKey: string;
                readonly accessKeyLabel: string;
                autocapitalize: string;
                dir: string;
                draggable: boolean;
                hidden: boolean;
                innerText: string;
                lang: string;
                readonly offsetHeight: number;
                readonly offsetLeft: number;
                readonly offsetParent: Element;
                readonly offsetTop: number;
                readonly offsetWidth: number;
                outerText: string;
                spellcheck: boolean;
                title: string;
                translate: boolean;
                attachInternals(): ElementInternals;
                click(): void;
                addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
                addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
                removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
                removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
                readonly attributes: NamedNodeMap;
                readonly classList: DOMTokenList;
                className: string;
                readonly clientHeight: number;
                readonly clientLeft: number;
                readonly clientTop: number;
                readonly clientWidth: number;
                readonly localName: string;
                readonly namespaceURI: string;
                onfullscreenchange: (this: Element, ev: Event) => any;
                onfullscreenerror: (this: Element, ev: Event) => any;
                outerHTML: string;
                readonly ownerDocument: Document;
                readonly part: DOMTokenList;
                readonly prefix: string;
                readonly scrollHeight: number;
                scrollLeft: number;
                scrollTop: number;
                readonly scrollWidth: number;
                readonly shadowRoot: ShadowRoot;
                slot: string;
                readonly tagName: string;
                attachShadow(init: ShadowRootInit): ShadowRoot;
                closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
                closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
                closest<E extends Element = Element>(selectors: string): E;
                getAttribute(qualifiedName: string): string;
                getAttributeNS(namespace: string, localName: string): string;
                getAttributeNames(): string[];
                getAttributeNode(qualifiedName: string): Attr;
                getAttributeNodeNS(namespace: string, localName: string): Attr;
                getBoundingClientRect(): DOMRect;
                getClientRects(): DOMRectList;
                getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
                getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
                getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
                hasAttribute(qualifiedName: string): boolean;
                hasAttributeNS(namespace: string, localName: string): boolean;
                hasAttributes(): boolean;
                hasPointerCapture(pointerId: number): boolean;
                insertAdjacentElement(where: InsertPosition, element: Element): Element;
                insertAdjacentHTML(position: InsertPosition, text: string): void;
                insertAdjacentText(where: InsertPosition, data: string): void;
                matches(selectors: string): boolean;
                releasePointerCapture(pointerId: number): void;
                removeAttribute(qualifiedName: string): void;
                removeAttributeNS(namespace: string, localName: string): void;
                removeAttributeNode(attr: Attr): Attr;
                requestFullscreen(options?: FullscreenOptions): Promise<void>;
                requestPointerLock(): void;
                scroll(options?: ScrollToOptions): void;
                scroll(x: number, y: number): void;
                scrollBy(options?: ScrollToOptions): void;
                scrollBy(x: number, y: number): void;
                scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
                scrollTo(options?: ScrollToOptions): void;
                scrollTo(x: number, y: number): void;
                setAttribute(qualifiedName: string, value: string): void;
                setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
                setAttributeNode(attr: Attr): Attr;
                setAttributeNodeNS(attr: Attr): Attr;
                setPointerCapture(pointerId: number): void;
                toggleAttribute(qualifiedName: string, force?: boolean): boolean;
                webkitMatchesSelector(selectors: string): boolean;
                readonly baseURI: string;
                readonly childNodes: NodeListOf<ChildNode>;
                readonly firstChild: ChildNode;
                readonly isConnected: boolean;
                readonly lastChild: ChildNode;
                readonly nextSibling: ChildNode;
                readonly nodeName: string;
                readonly nodeType: number;
                nodeValue: string;
                readonly parentElement: HTMLElement;
                readonly parentNode: ParentNode;
                readonly previousSibling: ChildNode;
                textContent: string;
                appendChild<T extends Node>(node: T): T;
                cloneNode(deep?: boolean): Node;
                compareDocumentPosition(other: Node): number;
                contains(other: Node): boolean;
                getRootNode(options?: GetRootNodeOptions): Node;
                hasChildNodes(): boolean;
                insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
                isDefaultNamespace(namespace: string): boolean;
                isEqualNode(otherNode: Node): boolean;
                isSameNode(otherNode: Node): boolean;
                lookupNamespaceURI(prefix: string): string;
                lookupPrefix(namespace: string): string;
                normalize(): void;
                removeChild<T_2 extends Node>(child: T_2): T_2;
                replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
                readonly ATTRIBUTE_NODE: number;
                readonly CDATA_SECTION_NODE: number;
                readonly COMMENT_NODE: number;
                readonly DOCUMENT_FRAGMENT_NODE: number;
                readonly DOCUMENT_NODE: number;
                readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                readonly DOCUMENT_POSITION_CONTAINS: number;
                readonly DOCUMENT_POSITION_DISCONNECTED: number;
                readonly DOCUMENT_POSITION_FOLLOWING: number;
                readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                readonly DOCUMENT_POSITION_PRECEDING: number;
                readonly DOCUMENT_TYPE_NODE: number;
                readonly ELEMENT_NODE: number;
                readonly ENTITY_NODE: number;
                readonly ENTITY_REFERENCE_NODE: number;
                readonly NOTATION_NODE: number;
                readonly PROCESSING_INSTRUCTION_NODE: number;
                readonly TEXT_NODE: number;
                dispatchEvent(event: Event): boolean;
                ariaAtomic: string;
                ariaAutoComplete: string;
                ariaBusy: string;
                ariaChecked: string;
                ariaColCount: string;
                ariaColIndex: string;
                ariaColSpan: string;
                ariaCurrent: string;
                ariaDisabled: string;
                ariaExpanded: string;
                ariaHasPopup: string;
                ariaHidden: string;
                ariaKeyShortcuts: string;
                ariaLabel: string;
                ariaLevel: string;
                ariaLive: string;
                ariaModal: string;
                ariaMultiLine: string;
                ariaMultiSelectable: string;
                ariaOrientation: string;
                ariaPlaceholder: string;
                ariaPosInSet: string;
                ariaPressed: string;
                ariaReadOnly: string;
                ariaRequired: string;
                ariaRoleDescription: string;
                ariaRowCount: string;
                ariaRowIndex: string;
                ariaRowSpan: string;
                ariaSelected: string;
                ariaSetSize: string;
                ariaSort: string;
                ariaValueMax: string;
                ariaValueMin: string;
                ariaValueNow: string;
                ariaValueText: string;
                animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
                getAnimations(options?: GetAnimationsOptions): Animation[];
                after(...nodes: (string | Node)[]): void;
                before(...nodes: (string | Node)[]): void;
                remove(): void;
                replaceWith(...nodes: (string | Node)[]): void;
                innerHTML: string;
                readonly nextElementSibling: Element;
                readonly previousElementSibling: Element;
                readonly childElementCount: number;
                readonly children: HTMLCollection;
                readonly firstElementChild: Element;
                readonly lastElementChild: Element;
                append(...nodes: (string | Node)[]): void;
                prepend(...nodes: (string | Node)[]): void;
                querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
                querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
                querySelector<E_1 extends Element = Element>(selectors: string): E_1;
                querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
                querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
                querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
                replaceChildren(...nodes: (string | Node)[]): void;
                readonly assignedSlot: HTMLSlotElement;
                oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                readonly style: CSSStyleDeclaration;
                contentEditable: string;
                enterKeyHint: string;
                inputMode: string;
                readonly isContentEditable: boolean;
                onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
                onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
                oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
                oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
                onchange: (this: GlobalEventHandlers, ev: Event) => any;
                onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onclose: (this: GlobalEventHandlers, ev: Event) => any;
                oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
                ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
                onemptied: (this: GlobalEventHandlers, ev: Event) => any;
                onended: (this: GlobalEventHandlers, ev: Event) => any;
                onerror: OnErrorEventHandlerNonNull;
                onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
                onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
                ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                oninput: (this: GlobalEventHandlers, ev: Event) => any;
                oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
                onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onload: (this: GlobalEventHandlers, ev: Event) => any;
                onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
                onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
                onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
                onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onpause: (this: GlobalEventHandlers, ev: Event) => any;
                onplay: (this: GlobalEventHandlers, ev: Event) => any;
                onplaying: (this: GlobalEventHandlers, ev: Event) => any;
                onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
                onratechange: (this: GlobalEventHandlers, ev: Event) => any;
                onreset: (this: GlobalEventHandlers, ev: Event) => any;
                onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
                onscroll: (this: GlobalEventHandlers, ev: Event) => any;
                onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
                onseeked: (this: GlobalEventHandlers, ev: Event) => any;
                onseeking: (this: GlobalEventHandlers, ev: Event) => any;
                onselect: (this: GlobalEventHandlers, ev: Event) => any;
                onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
                onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
                onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
                onstalled: (this: GlobalEventHandlers, ev: Event) => any;
                onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
                onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
                ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
                ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
                ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
                onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
                onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
                autofocus: boolean;
                readonly dataset: DOMStringMap;
                nonce?: string;
                tabIndex: number;
                blur(): void;
                focus(options?: FocusOptions): void;
            };
            mouseDown: boolean;
            translation: {
                x: number;
                y: number;
            };
            nodes: Map<any, any>;
            edges: Map<any, any>;
            firstRender: boolean;
            onEdgesReady: () => void;
            set: (graph: any) => Promise<void>;
            graph: any;
            resize: (nodes?: any[]) => void;
            triggerUpdate: (reset2?: boolean) => void;
            resolveEdge: (info: any, rerender?: boolean, willAwait?: boolean) => Promise<{
                svgInfo: {
                    size: number;
                    radius: number;
                };
                link: (info: any) => Promise<boolean>;
                toResolve: {
                    type: any;
                    listeners: {
                        name: string;
                        function: (e8: any) => void;
                    }[];
                    callback: any;
                };
                getOtherType: (type: any) => "input" | "output";
                updated: () => Promise<void>;
                element: SVGSVGElement;
                workspace: any;
                box: {
                    xMin: number;
                    xMax: number;
                    yMin: number;
                    yMax: number;
                };
                node: {
                    p1: any;
                    p2: any;
                    c1: any;
                    c2: any;
                    c3: any;
                    l1: any;
                    l2: any;
                    curve: any;
                };
                getEdgeName: ({ input, output }?: {
                    input: any;
                    output: any;
                }) => string;
                resolveIO: (el: any, typeNeeded: any, callback: any, origin: any) => Promise<boolean>;
                firstUp: boolean;
                mouseAsTarget: (type: any, upCallback: any) => void;
                init: () => Promise<any>;
                insert: () => Promise<any>;
                _activate: () => Promise<void>;
                dragHandler: (event: any) => void;
                drag: {
                    node: any;
                    start: {
                        x: number;
                        y: number;
                    };
                    cursor: DOMPoint;
                };
                svgPoint: (svg2: any, x2: any, y2: any) => DOMPoint;
                updateElement: (element: any, attr: any) => void;
                getControlPoint: (circle: any) => {
                    x: number;
                    y: number;
                };
                updateControlPoints: (p1: any, p2: any) => void;
                drawCurve: () => void;
                addReactivity: () => void;
                _onMouseOverEdge: () => void;
                _onMouseOutEdge: () => void;
                _onClickEdge: () => void;
                deinit: () => void;
                resize: () => void;
                output: any;
                input: any;
                ready: Promise<any>;
                resolveReady: {
                    resolve: (arg: any) => void;
                    reject: (reason?: any) => void;
                };
                id: string;
                render(): {
                    _$litType$: any;
                    strings: any;
                    values: any[];
                };
                renderOptions: {
                    host: any;
                };
                createRenderRoot(): ShadowRoot;
                update(t5: any): void;
                _$Dt: any;
                connectedCallback(): void;
                disconnectedCallback(): void;
                _$Et: Map<any, any>;
                isUpdatePending: boolean;
                hasUpdated: boolean;
                _$Ei: any;
                o(): void;
                _$Ep: Promise<any>;
                enableUpdating(t5: any): void;
                _$AL: Map<any, any>;
                addController(t5: any): void;
                _$Eg: any[];
                removeController(t5: any): void;
                _$Em(): void;
                renderRoot: ShadowRoot;
                attributeChangedCallback(t5: any, i7: any, s6: any): void;
                _$ES(t5: any, i7: any, s6?: {
                    attribute: boolean;
                    type: StringConstructor;
                    converter: {
                        toAttribute(t5: any, i7: any): any;
                        fromAttribute(t5: any, i7: any): any;
                    };
                    reflect: boolean;
                    hasChanged: (t5: any, i7: any) => boolean;
                }): void;
                _$AK(t5: any, i7: any): void;
                requestUpdate(t5: any, i7: any, s6: any): void;
                _$EC: Map<any, any>;
                _$E_(): Promise<boolean>;
                scheduleUpdate(): void;
                performUpdate(): void;
                willUpdate(t5: any): void;
                _$AE(t5: any): void;
                _$EU(): void;
                readonly updateComplete: Promise<any>;
                getUpdateComplete(): Promise<any>;
                shouldUpdate(t5: any): boolean;
                firstUpdated(t5: any): void;
                accessKey: string;
                readonly accessKeyLabel: string;
                autocapitalize: string;
                dir: string;
                draggable: boolean;
                hidden: boolean;
                innerText: string;
                lang: string;
                readonly offsetHeight: number;
                readonly offsetLeft: number;
                readonly offsetParent: Element;
                readonly offsetTop: number;
                readonly offsetWidth: number;
                outerText: string;
                spellcheck: boolean;
                title: string;
                translate: boolean;
                attachInternals(): ElementInternals;
                click(): void;
                addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
                addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
                removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
                removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
                readonly attributes: NamedNodeMap;
                readonly classList: DOMTokenList;
                className: string;
                readonly clientHeight: number;
                readonly clientLeft: number;
                readonly clientTop: number;
                readonly clientWidth: number;
                readonly localName: string;
                readonly namespaceURI: string;
                onfullscreenchange: (this: Element, ev: Event) => any;
                onfullscreenerror: (this: Element, ev: Event) => any;
                outerHTML: string;
                readonly ownerDocument: Document;
                readonly part: DOMTokenList;
                readonly prefix: string;
                readonly scrollHeight: number;
                scrollLeft: number;
                scrollTop: number;
                readonly scrollWidth: number;
                readonly shadowRoot: ShadowRoot;
                slot: string;
                readonly tagName: string;
                attachShadow(init: ShadowRootInit): ShadowRoot;
                closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
                closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
                closest<E extends Element = Element>(selectors: string): E;
                getAttribute(qualifiedName: string): string;
                getAttributeNS(namespace: string, localName: string): string;
                getAttributeNames(): string[];
                getAttributeNode(qualifiedName: string): Attr;
                getAttributeNodeNS(namespace: string, localName: string): Attr;
                getBoundingClientRect(): DOMRect;
                getClientRects(): DOMRectList;
                getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
                getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
                getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
                hasAttribute(qualifiedName: string): boolean;
                hasAttributeNS(namespace: string, localName: string): boolean;
                hasAttributes(): boolean;
                hasPointerCapture(pointerId: number): boolean;
                insertAdjacentElement(where: InsertPosition, element: Element): Element;
                insertAdjacentHTML(position: InsertPosition, text: string): void;
                insertAdjacentText(where: InsertPosition, data: string): void;
                matches(selectors: string): boolean;
                releasePointerCapture(pointerId: number): void;
                removeAttribute(qualifiedName: string): void;
                removeAttributeNS(namespace: string, localName: string): void;
                removeAttributeNode(attr: Attr): Attr;
                requestFullscreen(options?: FullscreenOptions): Promise<void>;
                requestPointerLock(): void;
                scroll(options?: ScrollToOptions): void;
                scroll(x: number, y: number): void;
                scrollBy(options?: ScrollToOptions): void;
                scrollBy(x: number, y: number): void;
                scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
                scrollTo(options?: ScrollToOptions): void;
                scrollTo(x: number, y: number): void;
                setAttribute(qualifiedName: string, value: string): void;
                setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
                setAttributeNode(attr: Attr): Attr;
                setAttributeNodeNS(attr: Attr): Attr;
                setPointerCapture(pointerId: number): void;
                toggleAttribute(qualifiedName: string, force?: boolean): boolean;
                webkitMatchesSelector(selectors: string): boolean;
                readonly baseURI: string;
                readonly childNodes: NodeListOf<ChildNode>;
                readonly firstChild: ChildNode;
                readonly isConnected: boolean;
                readonly lastChild: ChildNode;
                readonly nextSibling: ChildNode;
                readonly nodeName: string;
                readonly nodeType: number;
                nodeValue: string;
                readonly parentElement: HTMLElement;
                readonly parentNode: ParentNode;
                readonly previousSibling: ChildNode;
                textContent: string;
                appendChild<T extends Node>(node: T): T;
                cloneNode(deep?: boolean): Node;
                compareDocumentPosition(other: Node): number;
                contains(other: Node): boolean;
                getRootNode(options?: GetRootNodeOptions): Node;
                hasChildNodes(): boolean;
                insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
                isDefaultNamespace(namespace: string): boolean;
                isEqualNode(otherNode: Node): boolean;
                isSameNode(otherNode: Node): boolean;
                lookupNamespaceURI(prefix: string): string;
                lookupPrefix(namespace: string): string;
                normalize(): void;
                removeChild<T_2 extends Node>(child: T_2): T_2;
                replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
                readonly ATTRIBUTE_NODE: number;
                readonly CDATA_SECTION_NODE: number;
                readonly COMMENT_NODE: number;
                readonly DOCUMENT_FRAGMENT_NODE: number;
                readonly DOCUMENT_NODE: number;
                readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                readonly DOCUMENT_POSITION_CONTAINS: number;
                readonly DOCUMENT_POSITION_DISCONNECTED: number;
                readonly DOCUMENT_POSITION_FOLLOWING: number;
                readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                readonly DOCUMENT_POSITION_PRECEDING: number;
                readonly DOCUMENT_TYPE_NODE: number;
                readonly ELEMENT_NODE: number;
                readonly ENTITY_NODE: number;
                readonly ENTITY_REFERENCE_NODE: number;
                readonly NOTATION_NODE: number;
                readonly PROCESSING_INSTRUCTION_NODE: number;
                readonly TEXT_NODE: number;
                dispatchEvent(event: Event): boolean;
                ariaAtomic: string;
                ariaAutoComplete: string;
                ariaBusy: string;
                ariaChecked: string;
                ariaColCount: string;
                ariaColIndex: string;
                ariaColSpan: string;
                ariaCurrent: string;
                ariaDisabled: string;
                ariaExpanded: string;
                ariaHasPopup: string;
                ariaHidden: string;
                ariaKeyShortcuts: string;
                ariaLabel: string;
                ariaLevel: string;
                ariaLive: string;
                ariaModal: string;
                ariaMultiLine: string;
                ariaMultiSelectable: string;
                ariaOrientation: string;
                ariaPlaceholder: string;
                ariaPosInSet: string;
                ariaPressed: string;
                ariaReadOnly: string;
                ariaRequired: string;
                ariaRoleDescription: string;
                ariaRowCount: string;
                ariaRowIndex: string;
                ariaRowSpan: string;
                ariaSelected: string;
                ariaSetSize: string;
                ariaSort: string;
                ariaValueMax: string;
                ariaValueMin: string;
                ariaValueNow: string;
                ariaValueText: string;
                animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
                getAnimations(options?: GetAnimationsOptions): Animation[];
                after(...nodes: (string | Node)[]): void;
                before(...nodes: (string | Node)[]): void;
                remove(): void;
                replaceWith(...nodes: (string | Node)[]): void;
                innerHTML: string;
                readonly nextElementSibling: Element;
                readonly previousElementSibling: Element;
                readonly childElementCount: number;
                readonly children: HTMLCollection;
                readonly firstElementChild: Element;
                readonly lastElementChild: Element;
                append(...nodes: (string | Node)[]): void;
                prepend(...nodes: (string | Node)[]): void;
                querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
                querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
                querySelector<E_1 extends Element = Element>(selectors: string): E_1;
                querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
                querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
                querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
                replaceChildren(...nodes: (string | Node)[]): void;
                readonly assignedSlot: HTMLSlotElement;
                oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                readonly style: CSSStyleDeclaration;
                contentEditable: string;
                enterKeyHint: string;
                inputMode: string;
                readonly isContentEditable: boolean;
                onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
                onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
                oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
                oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
                onchange: (this: GlobalEventHandlers, ev: Event) => any;
                onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onclose: (this: GlobalEventHandlers, ev: Event) => any;
                oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
                ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
                onemptied: (this: GlobalEventHandlers, ev: Event) => any;
                onended: (this: GlobalEventHandlers, ev: Event) => any;
                onerror: OnErrorEventHandlerNonNull;
                onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
                onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
                ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                oninput: (this: GlobalEventHandlers, ev: Event) => any;
                oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
                onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onload: (this: GlobalEventHandlers, ev: Event) => any;
                onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
                onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
                onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
                onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onpause: (this: GlobalEventHandlers, ev: Event) => any;
                onplay: (this: GlobalEventHandlers, ev: Event) => any;
                onplaying: (this: GlobalEventHandlers, ev: Event) => any;
                onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
                onratechange: (this: GlobalEventHandlers, ev: Event) => any;
                onreset: (this: GlobalEventHandlers, ev: Event) => any;
                onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
                onscroll: (this: GlobalEventHandlers, ev: Event) => any;
                onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
                onseeked: (this: GlobalEventHandlers, ev: Event) => any;
                onseeking: (this: GlobalEventHandlers, ev: Event) => any;
                onselect: (this: GlobalEventHandlers, ev: Event) => any;
                onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
                onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
                onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
                onstalled: (this: GlobalEventHandlers, ev: Event) => any;
                onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
                onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
                ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
                ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
                ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
                onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
                onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
                autofocus: boolean;
                readonly dataset: DOMStringMap;
                nonce?: string;
                tabIndex: number;
                blur(): void;
                focus(options?: FocusOptions): void;
            }>;
            autolayout: () => void;
            removeNode: (name: any) => void;
            addNode: (props: any) => {
                edges: Map<any, any>;
                ports: Map<any, any>;
                setInfo: (info: any) => void;
                info: any;
                updatePorts: (args: any) => void;
                willUpdate: (updatedProps: any) => void;
                setEdge: (edge: any) => Map<any, any>;
                deleteEdge: (id: any) => void;
                addPort: (info: any) => void;
                workspace: any;
                id: string;
                x: any;
                y: any;
                updated(changedProperties: any): void;
                element: HTMLDivElement;
                render(): {
                    _$litType$: any;
                    strings: any;
                    values: any[];
                };
                renderOptions: {
                    host: any;
                };
                createRenderRoot(): ShadowRoot;
                update(t5: any): void;
                _$Dt: any;
                connectedCallback(): void;
                disconnectedCallback(): void;
                _$Et: Map<any, any>;
                isUpdatePending: boolean;
                hasUpdated: boolean;
                _$Ei: any;
                o(): void;
                _$Ep: Promise<any>;
                enableUpdating(t5: any): void;
                _$AL: Map<any, any>;
                addController(t5: any): void;
                _$Eg: any[];
                removeController(t5: any): void;
                _$Em(): void;
                renderRoot: ShadowRoot;
                attributeChangedCallback(t5: any, i7: any, s6: any): void;
                _$ES(t5: any, i7: any, s6?: {
                    attribute: boolean;
                    type: StringConstructor;
                    converter: {
                        toAttribute(t5: any, i7: any): any;
                        fromAttribute(t5: any, i7: any): any;
                    };
                    reflect: boolean;
                    hasChanged: (t5: any, i7: any) => boolean;
                }): void;
                _$AK(t5: any, i7: any): void;
                requestUpdate(t5: any, i7: any, s6: any): void;
                _$EC: Map<any, any>;
                _$E_(): Promise<boolean>;
                scheduleUpdate(): void;
                performUpdate(): void;
                _$AE(t5: any): void;
                _$EU(): void;
                readonly updateComplete: Promise<any>;
                getUpdateComplete(): Promise<any>;
                shouldUpdate(t5: any): boolean;
                firstUpdated(t5: any): void;
                accessKey: string;
                readonly accessKeyLabel: string;
                autocapitalize: string;
                dir: string;
                draggable: boolean;
                hidden: boolean;
                innerText: string;
                lang: string;
                readonly offsetHeight: number;
                readonly offsetLeft: number;
                readonly offsetParent: Element;
                readonly offsetTop: number;
                readonly offsetWidth: number;
                outerText: string;
                spellcheck: boolean;
                title: string;
                translate: boolean;
                attachInternals(): ElementInternals;
                click(): void;
                addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
                addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
                removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
                removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
                readonly attributes: NamedNodeMap;
                readonly classList: DOMTokenList;
                className: string;
                readonly clientHeight: number;
                readonly clientLeft: number;
                readonly clientTop: number;
                readonly clientWidth: number;
                readonly localName: string;
                readonly namespaceURI: string;
                onfullscreenchange: (this: Element, ev: Event) => any;
                onfullscreenerror: (this: Element, ev: Event) => any;
                outerHTML: string;
                readonly ownerDocument: Document;
                readonly part: DOMTokenList;
                readonly prefix: string;
                readonly scrollHeight: number;
                scrollLeft: number;
                scrollTop: number;
                readonly scrollWidth: number;
                readonly shadowRoot: ShadowRoot;
                slot: string;
                readonly tagName: string;
                attachShadow(init: ShadowRootInit): ShadowRoot;
                closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
                closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
                closest<E extends Element = Element>(selectors: string): E;
                getAttribute(qualifiedName: string): string;
                getAttributeNS(namespace: string, localName: string): string;
                getAttributeNames(): string[];
                getAttributeNode(qualifiedName: string): Attr;
                getAttributeNodeNS(namespace: string, localName: string): Attr;
                getBoundingClientRect(): DOMRect;
                getClientRects(): DOMRectList;
                getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
                getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
                getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
                getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
                getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
                getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
                hasAttribute(qualifiedName: string): boolean;
                hasAttributeNS(namespace: string, localName: string): boolean;
                hasAttributes(): boolean;
                hasPointerCapture(pointerId: number): boolean;
                insertAdjacentElement(where: InsertPosition, element: Element): Element;
                insertAdjacentHTML(position: InsertPosition, text: string): void;
                insertAdjacentText(where: InsertPosition, data: string): void;
                matches(selectors: string): boolean;
                releasePointerCapture(pointerId: number): void;
                removeAttribute(qualifiedName: string): void;
                removeAttributeNS(namespace: string, localName: string): void;
                removeAttributeNode(attr: Attr): Attr;
                requestFullscreen(options?: FullscreenOptions): Promise<void>;
                requestPointerLock(): void;
                scroll(options?: ScrollToOptions): void;
                scroll(x: number, y: number): void;
                scrollBy(options?: ScrollToOptions): void;
                scrollBy(x: number, y: number): void;
                scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
                scrollTo(options?: ScrollToOptions): void;
                scrollTo(x: number, y: number): void;
                setAttribute(qualifiedName: string, value: string): void;
                setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
                setAttributeNode(attr: Attr): Attr;
                setAttributeNodeNS(attr: Attr): Attr;
                setPointerCapture(pointerId: number): void;
                toggleAttribute(qualifiedName: string, force?: boolean): boolean;
                webkitMatchesSelector(selectors: string): boolean;
                readonly baseURI: string;
                readonly childNodes: NodeListOf<ChildNode>;
                readonly firstChild: ChildNode;
                readonly isConnected: boolean;
                readonly lastChild: ChildNode;
                readonly nextSibling: ChildNode;
                readonly nodeName: string;
                readonly nodeType: number;
                nodeValue: string;
                readonly parentElement: HTMLElement;
                readonly parentNode: ParentNode;
                readonly previousSibling: ChildNode;
                textContent: string;
                appendChild<T extends Node>(node: T): T;
                cloneNode(deep?: boolean): Node;
                compareDocumentPosition(other: Node): number;
                contains(other: Node): boolean;
                getRootNode(options?: GetRootNodeOptions): Node;
                hasChildNodes(): boolean;
                insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
                isDefaultNamespace(namespace: string): boolean;
                isEqualNode(otherNode: Node): boolean;
                isSameNode(otherNode: Node): boolean;
                lookupNamespaceURI(prefix: string): string;
                lookupPrefix(namespace: string): string;
                normalize(): void;
                removeChild<T_2 extends Node>(child: T_2): T_2;
                replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
                readonly ATTRIBUTE_NODE: number;
                readonly CDATA_SECTION_NODE: number;
                readonly COMMENT_NODE: number;
                readonly DOCUMENT_FRAGMENT_NODE: number;
                readonly DOCUMENT_NODE: number;
                readonly DOCUMENT_POSITION_CONTAINED_BY: number;
                readonly DOCUMENT_POSITION_CONTAINS: number;
                readonly DOCUMENT_POSITION_DISCONNECTED: number;
                readonly DOCUMENT_POSITION_FOLLOWING: number;
                readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
                readonly DOCUMENT_POSITION_PRECEDING: number;
                readonly DOCUMENT_TYPE_NODE: number;
                readonly ELEMENT_NODE: number;
                readonly ENTITY_NODE: number;
                readonly ENTITY_REFERENCE_NODE: number;
                readonly NOTATION_NODE: number;
                readonly PROCESSING_INSTRUCTION_NODE: number;
                readonly TEXT_NODE: number;
                dispatchEvent(event: Event): boolean;
                ariaAtomic: string;
                ariaAutoComplete: string;
                ariaBusy: string;
                ariaChecked: string;
                ariaColCount: string;
                ariaColIndex: string;
                ariaColSpan: string;
                ariaCurrent: string;
                ariaDisabled: string;
                ariaExpanded: string;
                ariaHasPopup: string;
                ariaHidden: string;
                ariaKeyShortcuts: string;
                ariaLabel: string;
                ariaLevel: string;
                ariaLive: string;
                ariaModal: string;
                ariaMultiLine: string;
                ariaMultiSelectable: string;
                ariaOrientation: string;
                ariaPlaceholder: string;
                ariaPosInSet: string;
                ariaPressed: string;
                ariaReadOnly: string;
                ariaRequired: string;
                ariaRoleDescription: string;
                ariaRowCount: string;
                ariaRowIndex: string;
                ariaRowSpan: string;
                ariaSelected: string;
                ariaSetSize: string;
                ariaSort: string;
                ariaValueMax: string;
                ariaValueMin: string;
                ariaValueNow: string;
                ariaValueText: string;
                animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
                getAnimations(options?: GetAnimationsOptions): Animation[];
                after(...nodes: (string | Node)[]): void;
                before(...nodes: (string | Node)[]): void;
                remove(): void;
                replaceWith(...nodes: (string | Node)[]): void;
                innerHTML: string;
                readonly nextElementSibling: Element;
                readonly previousElementSibling: Element;
                readonly childElementCount: number;
                readonly children: HTMLCollection;
                readonly firstElementChild: Element;
                readonly lastElementChild: Element;
                append(...nodes: (string | Node)[]): void;
                prepend(...nodes: (string | Node)[]): void;
                querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
                querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
                querySelector<E_1 extends Element = Element>(selectors: string): E_1;
                querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
                querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
                querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
                replaceChildren(...nodes: (string | Node)[]): void;
                readonly assignedSlot: HTMLSlotElement;
                oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
                readonly style: CSSStyleDeclaration;
                contentEditable: string;
                enterKeyHint: string;
                inputMode: string;
                readonly isContentEditable: boolean;
                onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
                onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
                onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
                oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
                oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
                onchange: (this: GlobalEventHandlers, ev: Event) => any;
                onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onclose: (this: GlobalEventHandlers, ev: Event) => any;
                oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
                ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
                ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
                onemptied: (this: GlobalEventHandlers, ev: Event) => any;
                onended: (this: GlobalEventHandlers, ev: Event) => any;
                onerror: OnErrorEventHandlerNonNull;
                onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
                onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
                ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                oninput: (this: GlobalEventHandlers, ev: Event) => any;
                oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
                onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
                onload: (this: GlobalEventHandlers, ev: Event) => any;
                onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
                onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
                onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
                onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
                onpause: (this: GlobalEventHandlers, ev: Event) => any;
                onplay: (this: GlobalEventHandlers, ev: Event) => any;
                onplaying: (this: GlobalEventHandlers, ev: Event) => any;
                onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
                onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
                onratechange: (this: GlobalEventHandlers, ev: Event) => any;
                onreset: (this: GlobalEventHandlers, ev: Event) => any;
                onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
                onscroll: (this: GlobalEventHandlers, ev: Event) => any;
                onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
                onseeked: (this: GlobalEventHandlers, ev: Event) => any;
                onseeking: (this: GlobalEventHandlers, ev: Event) => any;
                onselect: (this: GlobalEventHandlers, ev: Event) => any;
                onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
                onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
                onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
                onstalled: (this: GlobalEventHandlers, ev: Event) => any;
                onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
                onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
                ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
                ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
                ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
                ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
                onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
                onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
                onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
                onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
                autofocus: boolean;
                readonly dataset: DOMStringMap;
                nonce?: string;
                tabIndex: number;
                blur(): void;
                focus(options?: FocusOptions): void;
            };
            createUIFromGraph: () => Promise<string>;
            onedgeadded: () => void;
            onedgeremoved: () => void;
            onnodeadded: () => void;
            onnoderemoved: () => void;
            _scale: (e8: any) => void;
            _transform: () => void;
            _pan: (e8: any) => void;
            relXParent: number;
            relYParent: number;
            updated(): void;
            element: HTMLDivElement;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        keys: {
            type: ObjectConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var GraphWorkspace: {
    new (props: any): {
        updateCount: number;
        context: {
            scale: number;
        };
        editing: {
            svgInfo: {
                size: number;
                radius: number;
            };
            link: (info: any) => Promise<boolean>;
            toResolve: {
                type: any;
                listeners: {
                    name: string;
                    function: (e8: any) => void;
                }[];
                callback: any;
            };
            getOtherType: (type: any) => "input" | "output";
            updated: () => Promise<void>;
            element: SVGSVGElement;
            workspace: any;
            box: {
                xMin: number;
                xMax: number;
                yMin: number;
                yMax: number;
            };
            node: {
                p1: any;
                p2: any;
                c1: any;
                c2: any;
                c3: any;
                l1: any;
                l2: any;
                curve: any;
            };
            getEdgeName: ({ input, output }?: {
                input: any;
                output: any;
            }) => string;
            resolveIO: (el: any, typeNeeded: any, callback: any, origin: any) => Promise<boolean>;
            firstUp: boolean;
            mouseAsTarget: (type: any, upCallback: any) => void;
            init: () => Promise<any>;
            insert: () => Promise<any>;
            _activate: () => Promise<void>;
            dragHandler: (event: any) => void;
            drag: {
                node: any;
                start: {
                    x: number;
                    y: number;
                };
                cursor: DOMPoint;
            };
            svgPoint: (svg2: any, x2: any, y2: any) => DOMPoint;
            updateElement: (element: any, attr: any) => void;
            getControlPoint: (circle: any) => {
                x: number;
                y: number;
            };
            updateControlPoints: (p1: any, p2: any) => void;
            drawCurve: () => void;
            addReactivity: () => void;
            _onMouseOverEdge: () => void;
            _onMouseOutEdge: () => void;
            _onClickEdge: () => void;
            deinit: () => void;
            resize: () => void;
            output: any;
            input: any;
            ready: Promise<any>;
            resolveReady: {
                resolve: (arg: any) => void;
                reject: (reason?: any) => void;
            };
            id: string;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        mouseDown: boolean;
        translation: {
            x: number;
            y: number;
        };
        nodes: Map<any, any>;
        edges: Map<any, any>;
        firstRender: boolean;
        onEdgesReady: () => void;
        set: (graph: any) => Promise<void>;
        graph: any;
        resize: (nodes?: any[]) => void;
        triggerUpdate: (reset2?: boolean) => void;
        resolveEdge: (info: any, rerender?: boolean, willAwait?: boolean) => Promise<{
            svgInfo: {
                size: number;
                radius: number;
            };
            link: (info: any) => Promise<boolean>;
            toResolve: {
                type: any;
                listeners: {
                    name: string;
                    function: (e8: any) => void;
                }[];
                callback: any;
            };
            getOtherType: (type: any) => "input" | "output";
            updated: () => Promise<void>;
            element: SVGSVGElement;
            workspace: any;
            box: {
                xMin: number;
                xMax: number;
                yMin: number;
                yMax: number;
            };
            node: {
                p1: any;
                p2: any;
                c1: any;
                c2: any;
                c3: any;
                l1: any;
                l2: any;
                curve: any;
            };
            getEdgeName: ({ input, output }?: {
                input: any;
                output: any;
            }) => string;
            resolveIO: (el: any, typeNeeded: any, callback: any, origin: any) => Promise<boolean>;
            firstUp: boolean;
            mouseAsTarget: (type: any, upCallback: any) => void;
            init: () => Promise<any>;
            insert: () => Promise<any>;
            _activate: () => Promise<void>;
            dragHandler: (event: any) => void;
            drag: {
                node: any;
                start: {
                    x: number;
                    y: number;
                };
                cursor: DOMPoint;
            };
            svgPoint: (svg2: any, x2: any, y2: any) => DOMPoint;
            updateElement: (element: any, attr: any) => void;
            getControlPoint: (circle: any) => {
                x: number;
                y: number;
            };
            updateControlPoints: (p1: any, p2: any) => void;
            drawCurve: () => void;
            addReactivity: () => void;
            _onMouseOverEdge: () => void;
            _onMouseOutEdge: () => void;
            _onClickEdge: () => void;
            deinit: () => void;
            resize: () => void;
            output: any;
            input: any;
            ready: Promise<any>;
            resolveReady: {
                resolve: (arg: any) => void;
                reject: (reason?: any) => void;
            };
            id: string;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        }>;
        autolayout: () => void;
        removeNode: (name: any) => void;
        addNode: (props: any) => {
            edges: Map<any, any>;
            ports: Map<any, any>;
            setInfo: (info: any) => void;
            info: any;
            updatePorts: (args: any) => void;
            willUpdate: (updatedProps: any) => void;
            setEdge: (edge: any) => Map<any, any>;
            deleteEdge: (id: any) => void;
            addPort: (info: any) => void;
            workspace: any;
            id: string;
            x: any;
            y: any;
            updated(changedProperties: any): void;
            element: HTMLDivElement;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        createUIFromGraph: () => Promise<string>;
        onedgeadded: () => void;
        onedgeremoved: () => void;
        onnodeadded: () => void;
        onnoderemoved: () => void;
        _scale: (e8: any) => void;
        _transform: () => void;
        _pan: (e8: any) => void;
        relXParent: number;
        relYParent: number;
        updated(): void;
        element: HTMLDivElement;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        updateCount: {
            type: NumberConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Input: {
    new (props?: {}): {
        value: any;
        outline: any;
        disabled: any;
        label: any;
        persist: any;
        onChange: any;
        onInput: any;
        willUpdate(changedProps: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly properties: {
        label: {
            type: StringConstructor;
            reflect: boolean;
        };
        persist: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        value: {
            type: StringConstructor;
            reflect: boolean;
        };
        onChange: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    } & {
        disabled: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        outline: {
            type: BooleanConstructor;
            reflect: boolean;
        };
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Loader: {
    new (props?: {}): {
        progress: any;
        color: any;
        background: any;
        type: any;
        showPercent: any;
        text: any;
        textBackground: any;
        textColor: any;
        size: any;
        willUpdate(_2: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        progress: {
            type: NumberConstructor;
            reflect: boolean;
        };
        text: {
            type: StringConstructor;
            reflect: boolean;
        };
        type: {
            type: StringConstructor;
            reflect: boolean;
        };
        color: {
            type: StringConstructor;
            reflect: boolean;
        };
        background: {
            type: StringConstructor;
            reflect: boolean;
        };
        textBackground: {
            type: StringConstructor;
            reflect: boolean;
        };
        textColor: {
            type: StringConstructor;
            reflect: boolean;
        };
        size: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Main: {
    new (props?: {
        target: {};
        header: string;
    }): {
        tabs: Map<any, any>;
        getTabs: () => Element[];
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        tabs: {
            type: ObjectConstructor;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Modal: {
    new (props?: {}): {
        toggle: () => boolean;
        open: any;
        header: any;
        footer: any;
        willUpdate(_2: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        open: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        header: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        footer: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Nav: {
    new (props?: {
        brand: {};
        primary: {
            menu: any[];
            options: any[];
        };
        secondary: any[];
    }): {
        stringToFunction: (value: any) => any;
        getElement: (o8: any) => HTMLElement | {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        primary: {
            menu: any[];
            options: any[];
        };
        secondary: any[];
        color: any;
        brand: {};
        willUpdate(changedProps: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        primary: {
            type: ObjectConstructor;
        };
        secondary: {
            type: ArrayConstructor;
            reflect: boolean;
        };
        brand: {
            type: ObjectConstructor;
        };
        color: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var ObjectEditor: {
    new (props?: {
        target: {};
        header: string;
    }): {
        history: any[];
        getMode: (target: any, plot: any) => "view" | "plot";
        set: (target?: {}, plot?: boolean) => Promise<void>;
        target: any;
        keys: string[];
        mode: any;
        checkToPlot: (key: any, o8: any) => boolean;
        getActions: (key: any, o8: any) => Promise<{
            _$litType$: any;
            strings: any;
            values: any[];
        }>;
        header: string;
        getElement: (key: any, o8: any) => Promise<{
            _$litType$: any;
            strings: any;
            values: any[];
        }>;
        plot: any;
        onPlot: any;
        preprocess: any;
        timeseries: {
            colorscale: any;
            div: HTMLDivElement;
            data: any;
            plotData: any[];
            layout: any;
            windowSize: number;
            binWidth: number;
            colorscales: string[];
            config: any;
            getTraces: () => any;
            getConfig: () => any;
            getLayout: () => any;
            onClick: any;
            onLegendClick: any;
            Plotly: any;
            createRenderRoot(): any;
            transpose(a3: any): any[];
            willUpdate(changedProps: any): void;
            render(): HTMLDivElement;
            renderOptions: {
                host: any;
            };
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        render(): {
            _$litDirective$: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        keys: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        plot: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        header: {
            type: StringConstructor;
            reflect: boolean;
        };
        mode: {
            type: StringConstructor;
            reflect: boolean;
        };
        onPlot: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        preprocess: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Overlay: {
    new (props?: {}): {
        open: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        open: {
            type: BooleanConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Panel: {
    new (props?: {}): {
        minTabs: any;
        tabs: Map<any, any>;
        bar: {
            tabs: any[];
            delete: (name: any) => void;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            updated(t5: any): void;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        reset: () => void;
        activeTab: number;
        addTab: (tab: any, switchTo?: boolean) => void;
        removeTab: (tab: any) => void;
        updateTabs: () => void;
        tabLabels: any[];
        getTabs: () => any[];
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        tabLabels: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        tabs: {
            type: ObjectConstructor;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Range: {
    new (props?: {}): {
        persist: any;
        value: any;
        min: any;
        max: any;
        onChange: any;
        onInput: () => void;
        label: any;
        willUpdate(changedProps: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        label: {
            type: StringConstructor;
            reflect: boolean;
        };
        persist: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        value: {
            type: StringConstructor;
            reflect: boolean;
        };
        onChange: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    } & {
        min: {
            type: NumberConstructor;
            reflect: boolean;
        };
        max: {
            type: NumberConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Search: {
    new (props?: {}): {
        getModal: () => Element;
        items: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        modal: Element;
        value: any;
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        placeholder: {
            type: StringConstructor;
        };
        items: {
            type: ObjectConstructor;
        };
        value: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Select: {
    new (props?: {}): {
        persist: any;
        optionChecked: string;
        optionHoveredIndex: number;
        options: any;
        onChange: any;
        add: (option: any) => void;
        openSelectCustom: () => void;
        closeSelectCustom: () => void;
        updateCustomSelectHovered: (newIndex: any) => void;
        updateCustomSelectChecked: (value: any, text2: any) => void;
        watchClickOutside: (e8: any) => void;
        supportKeyboardNavigation: (e8: any) => void;
        value: any;
        label: any;
        willUpdate(changedProps: any): void;
        updated(changedProperties: any): void;
        optionsCount: number;
        elements: {
            elSelectNative: Element;
            elSelectCustom: Element;
            elSelectCustomOpts: Element;
            customOptsList: Element[];
        };
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        options: {
            type: ArrayConstructor;
            reflect: boolean;
        };
    } & {
        label: {
            type: StringConstructor;
            reflect: boolean;
        };
        persist: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        value: {
            type: StringConstructor;
            reflect: boolean;
        };
        onChange: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var SessionEditor: {
    new (props?: {
        target: {};
        header: string;
    }): {
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {};
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Sidebar: {
    new (props?: {}): {
        content: string;
        interacted: boolean;
        closed: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        closed: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        content: {
            type: ObjectConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var SidebarHeader: {
    new (props?: {}): {
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {};
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
declare var Spectrogram2: {
    new (props?: {}): {
        colorscale: any;
        div: HTMLDivElement;
        data: any;
        plotData: {
            x: number[];
            z: any[];
            showscale: boolean;
            colorscale: any;
            type: string;
        }[];
        layout: {};
        windowSize: number;
        binWidth: number;
        config: any;
        colorscales: string[];
        resize: () => void;
        getConfig: () => any;
        Plotly: any;
        createRenderRoot(): any;
        transpose(a3: any): any[];
        willUpdate(changedProps: any): void;
        render(): HTMLDivElement;
        renderOptions: {
            host: any;
        };
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        max: {
            type: NumberConstructor;
            reflect: boolean;
        };
        data: {
            type: ArrayConstructor;
            reflect: boolean;
        };
        config: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        colorscale: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        backgroundColor: {
            type: StringConstructor;
            reflect: boolean;
        };
    };
    colorscales: string[];
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Switch: {
    new (props?: {}): {
        persist: any;
        onChange: any;
        value: any;
        label: any;
        willUpdate(changedProps: any): void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        label: {
            type: StringConstructor;
            reflect: boolean;
        };
        persist: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        value: {
            type: StringConstructor;
            reflect: boolean;
        };
        onChange: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Tab: {
    new (props?: {}): {
        controls: any;
        on: any;
        off: any;
        type: string;
        addControl: (instance: any) => void;
        delete: (fromParent?: boolean) => void;
        updated: () => void;
        name: any;
        close: any;
        dashboard: Element;
        toggle: {
            grow: any;
            select: (toggles: any) => void;
            selected: any;
            updated: () => void;
            bar: any;
            to: any;
            close: any;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        willUpdate(changedProps: any): void;
        controlPanel: HTMLDivElement;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        name: {
            type: StringConstructor;
            reflect: boolean;
        };
        controls: {
            type: ArrayConstructor;
            reflect: boolean;
        };
        on: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        close: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        type: {
            type: StringConstructor;
            reflect: boolean;
        };
        off: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var TabBar: {
    new (props?: {}): {
        tabs: any[];
        delete: (name: any) => void;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        tabs: {
            type: ObjectConstructor;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export namespace TabBarPropsList {
    namespace tabs {
        const type: ObjectConstructor;
    }
}
export namespace TabPropsLit {
    export namespace name {
        const type_1: StringConstructor;
        export { type_1 as type };
        export const reflect: boolean;
    }
    export namespace controls {
        const type_2: ArrayConstructor;
        export { type_2 as type };
        const reflect_1: boolean;
        export { reflect_1 as reflect };
    }
    export namespace on {
        const type_3: FunctionConstructor;
        export { type_3 as type };
        const reflect_2: boolean;
        export { reflect_2 as reflect };
    }
    export namespace close {
        const type_4: BooleanConstructor;
        export { type_4 as type };
        const reflect_3: boolean;
        export { reflect_3 as reflect };
    }
    export namespace type_5 {
        const type_6: StringConstructor;
        export { type_6 as type };
        const reflect_4: boolean;
        export { reflect_4 as reflect };
    }
    export { type_5 as type };
    export namespace off {
        const type_7: FunctionConstructor;
        export { type_7 as type };
        const reflect_5: boolean;
        export { reflect_5 as reflect };
    }
}
export var TabToggle: {
    new (props: any): {
        grow: any;
        select: (toggles: any) => void;
        selected: any;
        updated: () => void;
        bar: any;
        to: any;
        close: any;
        render(): {
            _$litType$: any;
            strings: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        selected: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        grow: {
            type: BooleanConstructor;
            reflect: boolean;
        };
        close: {
            type: BooleanConstructor;
            reflect: boolean;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export namespace TabTogglePropsList {
    export namespace selected {
        const type_8: BooleanConstructor;
        export { type_8 as type };
        const reflect_6: boolean;
        export { reflect_6 as reflect };
    }
    export namespace grow {
        const type_9: BooleanConstructor;
        export { type_9 as type };
        const reflect_7: boolean;
        export { reflect_7 as reflect };
    }
    export namespace close_1 {
        const type_10: BooleanConstructor;
        export { type_10 as type };
        const reflect_8: boolean;
        export { reflect_8 as reflect };
    }
    export { close_1 as close };
}
declare var TimeSeries2: {
    new (props?: {}): {
        colorscale: any;
        div: HTMLDivElement;
        data: any;
        plotData: any[];
        layout: any;
        windowSize: number;
        binWidth: number;
        colorscales: string[];
        config: any;
        getTraces: () => any;
        getConfig: () => any;
        getLayout: () => any;
        onClick: any;
        onLegendClick: any;
        Plotly: any;
        createRenderRoot(): any;
        transpose(a3: any): any[];
        willUpdate(changedProps: any): void;
        render(): HTMLDivElement;
        renderOptions: {
            host: any;
        };
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        max: {
            type: NumberConstructor;
            reflect: boolean;
        };
        data: {
            type: ArrayConstructor;
            reflect: boolean;
        };
        layout: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        config: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        colorscale: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        backgroundColor: {
            type: StringConstructor;
            reflect: boolean;
        };
        onLegendClick: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        onClick: {
            type: FunctionConstructor;
            reflect: boolean;
        };
    };
    colorscales: string[];
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
export var Tree: {
    new (props?: {
        target: {};
    }): {
        depth: any;
        items: any[];
        set: (target?: {}) => Promise<void>;
        target: {};
        keys: string[];
        createItem: (type: any, key: any, value: any) => {
            type: any;
            ready: Promise<any>;
            resolveReady: {
                resolve: (value: any) => void;
                reject: (reason?: any) => void;
            };
            removeClass: (str: any) => void;
            updated: () => void;
            key: any;
            value: any;
            parent: any;
            onClick: any;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            editing: boolean;
            error: boolean;
            tree: any;
            li: HTMLLIElement;
            open: boolean;
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        };
        getElement: (key: any, o8: any) => Promise<{
            type: any;
            ready: Promise<any>;
            resolveReady: {
                resolve: (value: any) => void;
                reject: (reason?: any) => void;
            };
            removeClass: (str: any) => void;
            updated: () => void;
            key: any;
            value: any;
            parent: any;
            onClick: any;
            render(): {
                _$litType$: any;
                strings: any;
                values: any[];
            };
            editing: boolean;
            error: boolean;
            tree: any;
            li: HTMLLIElement;
            open: boolean;
            renderOptions: {
                host: any;
            };
            createRenderRoot(): ShadowRoot;
            update(t5: any): void;
            _$Dt: any;
            connectedCallback(): void;
            disconnectedCallback(): void;
            _$Et: Map<any, any>;
            isUpdatePending: boolean;
            hasUpdated: boolean;
            _$Ei: any;
            o(): void;
            _$Ep: Promise<any>;
            enableUpdating(t5: any): void;
            _$AL: Map<any, any>;
            addController(t5: any): void;
            _$Eg: any[];
            removeController(t5: any): void;
            _$Em(): void;
            renderRoot: ShadowRoot;
            attributeChangedCallback(t5: any, i7: any, s6: any): void;
            _$ES(t5: any, i7: any, s6?: {
                attribute: boolean;
                type: StringConstructor;
                converter: {
                    toAttribute(t5: any, i7: any): any;
                    fromAttribute(t5: any, i7: any): any;
                };
                reflect: boolean;
                hasChanged: (t5: any, i7: any) => boolean;
            }): void;
            _$AK(t5: any, i7: any): void;
            requestUpdate(t5: any, i7: any, s6: any): void;
            _$EC: Map<any, any>;
            _$E_(): Promise<boolean>;
            scheduleUpdate(): void;
            performUpdate(): void;
            willUpdate(t5: any): void;
            _$AE(t5: any): void;
            _$EU(): void;
            readonly updateComplete: Promise<any>;
            getUpdateComplete(): Promise<any>;
            shouldUpdate(t5: any): boolean;
            firstUpdated(t5: any): void;
            accessKey: string;
            readonly accessKeyLabel: string;
            autocapitalize: string;
            dir: string;
            draggable: boolean;
            hidden: boolean;
            innerText: string;
            lang: string;
            readonly offsetHeight: number;
            readonly offsetLeft: number;
            readonly offsetParent: Element;
            readonly offsetTop: number;
            readonly offsetWidth: number;
            outerText: string;
            spellcheck: boolean;
            title: string;
            translate: boolean;
            attachInternals(): ElementInternals;
            click(): void;
            addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
            addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
            removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
            removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
            readonly attributes: NamedNodeMap;
            readonly classList: DOMTokenList;
            className: string;
            readonly clientHeight: number;
            readonly clientLeft: number;
            readonly clientTop: number;
            readonly clientWidth: number;
            id: string;
            readonly localName: string;
            readonly namespaceURI: string;
            onfullscreenchange: (this: Element, ev: Event) => any;
            onfullscreenerror: (this: Element, ev: Event) => any;
            outerHTML: string;
            readonly ownerDocument: Document;
            readonly part: DOMTokenList;
            readonly prefix: string;
            readonly scrollHeight: number;
            scrollLeft: number;
            scrollTop: number;
            readonly scrollWidth: number;
            readonly shadowRoot: ShadowRoot;
            slot: string;
            readonly tagName: string;
            attachShadow(init: ShadowRootInit): ShadowRoot;
            closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
            closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
            closest<E extends Element = Element>(selectors: string): E;
            getAttribute(qualifiedName: string): string;
            getAttributeNS(namespace: string, localName: string): string;
            getAttributeNames(): string[];
            getAttributeNode(qualifiedName: string): Attr;
            getAttributeNodeNS(namespace: string, localName: string): Attr;
            getBoundingClientRect(): DOMRect;
            getClientRects(): DOMRectList;
            getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
            getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
            getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
            getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
            getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
            getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
            hasAttribute(qualifiedName: string): boolean;
            hasAttributeNS(namespace: string, localName: string): boolean;
            hasAttributes(): boolean;
            hasPointerCapture(pointerId: number): boolean;
            insertAdjacentElement(where: InsertPosition, element: Element): Element;
            insertAdjacentHTML(position: InsertPosition, text: string): void;
            insertAdjacentText(where: InsertPosition, data: string): void;
            matches(selectors: string): boolean;
            releasePointerCapture(pointerId: number): void;
            removeAttribute(qualifiedName: string): void;
            removeAttributeNS(namespace: string, localName: string): void;
            removeAttributeNode(attr: Attr): Attr;
            requestFullscreen(options?: FullscreenOptions): Promise<void>;
            requestPointerLock(): void;
            scroll(options?: ScrollToOptions): void;
            scroll(x: number, y: number): void;
            scrollBy(options?: ScrollToOptions): void;
            scrollBy(x: number, y: number): void;
            scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
            scrollTo(options?: ScrollToOptions): void;
            scrollTo(x: number, y: number): void;
            setAttribute(qualifiedName: string, value: string): void;
            setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
            setAttributeNode(attr: Attr): Attr;
            setAttributeNodeNS(attr: Attr): Attr;
            setPointerCapture(pointerId: number): void;
            toggleAttribute(qualifiedName: string, force?: boolean): boolean;
            webkitMatchesSelector(selectors: string): boolean;
            readonly baseURI: string;
            readonly childNodes: NodeListOf<ChildNode>;
            readonly firstChild: ChildNode;
            readonly isConnected: boolean;
            readonly lastChild: ChildNode;
            readonly nextSibling: ChildNode;
            readonly nodeName: string;
            readonly nodeType: number;
            nodeValue: string;
            readonly parentElement: HTMLElement;
            readonly parentNode: ParentNode;
            readonly previousSibling: ChildNode;
            textContent: string;
            appendChild<T extends Node>(node: T): T;
            cloneNode(deep?: boolean): Node;
            compareDocumentPosition(other: Node): number;
            contains(other: Node): boolean;
            getRootNode(options?: GetRootNodeOptions): Node;
            hasChildNodes(): boolean;
            insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
            isDefaultNamespace(namespace: string): boolean;
            isEqualNode(otherNode: Node): boolean;
            isSameNode(otherNode: Node): boolean;
            lookupNamespaceURI(prefix: string): string;
            lookupPrefix(namespace: string): string;
            normalize(): void;
            removeChild<T_2 extends Node>(child: T_2): T_2;
            replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
            readonly ATTRIBUTE_NODE: number;
            readonly CDATA_SECTION_NODE: number;
            readonly COMMENT_NODE: number;
            readonly DOCUMENT_FRAGMENT_NODE: number;
            readonly DOCUMENT_NODE: number;
            readonly DOCUMENT_POSITION_CONTAINED_BY: number;
            readonly DOCUMENT_POSITION_CONTAINS: number;
            readonly DOCUMENT_POSITION_DISCONNECTED: number;
            readonly DOCUMENT_POSITION_FOLLOWING: number;
            readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
            readonly DOCUMENT_POSITION_PRECEDING: number;
            readonly DOCUMENT_TYPE_NODE: number;
            readonly ELEMENT_NODE: number;
            readonly ENTITY_NODE: number;
            readonly ENTITY_REFERENCE_NODE: number;
            readonly NOTATION_NODE: number;
            readonly PROCESSING_INSTRUCTION_NODE: number;
            readonly TEXT_NODE: number;
            dispatchEvent(event: Event): boolean;
            ariaAtomic: string;
            ariaAutoComplete: string;
            ariaBusy: string;
            ariaChecked: string;
            ariaColCount: string;
            ariaColIndex: string;
            ariaColSpan: string;
            ariaCurrent: string;
            ariaDisabled: string;
            ariaExpanded: string;
            ariaHasPopup: string;
            ariaHidden: string;
            ariaKeyShortcuts: string;
            ariaLabel: string;
            ariaLevel: string;
            ariaLive: string;
            ariaModal: string;
            ariaMultiLine: string;
            ariaMultiSelectable: string;
            ariaOrientation: string;
            ariaPlaceholder: string;
            ariaPosInSet: string;
            ariaPressed: string;
            ariaReadOnly: string;
            ariaRequired: string;
            ariaRoleDescription: string;
            ariaRowCount: string;
            ariaRowIndex: string;
            ariaRowSpan: string;
            ariaSelected: string;
            ariaSetSize: string;
            ariaSort: string;
            ariaValueMax: string;
            ariaValueMin: string;
            ariaValueNow: string;
            ariaValueText: string;
            animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
            getAnimations(options?: GetAnimationsOptions): Animation[];
            after(...nodes: (string | Node)[]): void;
            before(...nodes: (string | Node)[]): void;
            remove(): void;
            replaceWith(...nodes: (string | Node)[]): void;
            innerHTML: string;
            readonly nextElementSibling: Element;
            readonly previousElementSibling: Element;
            readonly childElementCount: number;
            readonly children: HTMLCollection;
            readonly firstElementChild: Element;
            readonly lastElementChild: Element;
            append(...nodes: (string | Node)[]): void;
            prepend(...nodes: (string | Node)[]): void;
            querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
            querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
            querySelector<E_1 extends Element = Element>(selectors: string): E_1;
            querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
            querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
            querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
            replaceChildren(...nodes: (string | Node)[]): void;
            readonly assignedSlot: HTMLSlotElement;
            oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
            readonly style: CSSStyleDeclaration;
            contentEditable: string;
            enterKeyHint: string;
            inputMode: string;
            readonly isContentEditable: boolean;
            onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
            onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
            oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
            onchange: (this: GlobalEventHandlers, ev: Event) => any;
            onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onclose: (this: GlobalEventHandlers, ev: Event) => any;
            oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
            ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
            ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
            onemptied: (this: GlobalEventHandlers, ev: Event) => any;
            onended: (this: GlobalEventHandlers, ev: Event) => any;
            onerror: OnErrorEventHandlerNonNull;
            onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
            onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
            ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            oninput: (this: GlobalEventHandlers, ev: Event) => any;
            oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
            onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
            onload: (this: GlobalEventHandlers, ev: Event) => any;
            onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
            onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
            onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
            onpause: (this: GlobalEventHandlers, ev: Event) => any;
            onplay: (this: GlobalEventHandlers, ev: Event) => any;
            onplaying: (this: GlobalEventHandlers, ev: Event) => any;
            onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
            onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
            onratechange: (this: GlobalEventHandlers, ev: Event) => any;
            onreset: (this: GlobalEventHandlers, ev: Event) => any;
            onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
            onscroll: (this: GlobalEventHandlers, ev: Event) => any;
            onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
            onseeked: (this: GlobalEventHandlers, ev: Event) => any;
            onseeking: (this: GlobalEventHandlers, ev: Event) => any;
            onselect: (this: GlobalEventHandlers, ev: Event) => any;
            onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
            onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
            onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
            onstalled: (this: GlobalEventHandlers, ev: Event) => any;
            onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
            onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
            ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
            ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
            ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
            ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
            onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
            onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
            onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
            onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
            autofocus: boolean;
            readonly dataset: DOMStringMap;
            nonce?: string;
            tabIndex: number;
            blur(): void;
            focus(options?: FocusOptions): void;
        }>;
        add: (key: any, value: any) => void;
        create: (type: any, targetTree: any) => Promise<void>;
        input: any;
        addContextOptions: () => void;
        onClick: any;
        render(): {
            _$litDirective$: any;
            values: any[];
        };
        renderOptions: {
            host: any;
        };
        createRenderRoot(): ShadowRoot;
        update(t5: any): void;
        _$Dt: any;
        connectedCallback(): void;
        disconnectedCallback(): void;
        _$Et: Map<any, any>;
        isUpdatePending: boolean;
        hasUpdated: boolean;
        _$Ei: any;
        o(): void;
        _$Ep: Promise<any>;
        enableUpdating(t5: any): void;
        _$AL: Map<any, any>;
        addController(t5: any): void;
        _$Eg: any[];
        removeController(t5: any): void;
        _$Em(): void;
        renderRoot: ShadowRoot;
        attributeChangedCallback(t5: any, i7: any, s6: any): void;
        _$ES(t5: any, i7: any, s6?: {
            attribute: boolean;
            type: StringConstructor;
            converter: {
                toAttribute(t5: any, i7: any): any;
                fromAttribute(t5: any, i7: any): any;
            };
            reflect: boolean;
            hasChanged: (t5: any, i7: any) => boolean;
        }): void;
        _$AK(t5: any, i7: any): void;
        requestUpdate(t5: any, i7: any, s6: any): void;
        _$EC: Map<any, any>;
        _$E_(): Promise<boolean>;
        scheduleUpdate(): void;
        performUpdate(): void;
        willUpdate(t5: any): void;
        _$AE(t5: any): void;
        _$EU(): void;
        readonly updateComplete: Promise<any>;
        getUpdateComplete(): Promise<any>;
        shouldUpdate(t5: any): boolean;
        updated(t5: any): void;
        firstUpdated(t5: any): void;
        accessKey: string;
        readonly accessKeyLabel: string;
        autocapitalize: string;
        dir: string;
        draggable: boolean;
        hidden: boolean;
        innerText: string;
        lang: string;
        readonly offsetHeight: number;
        readonly offsetLeft: number;
        readonly offsetParent: Element;
        readonly offsetTop: number;
        readonly offsetWidth: number;
        outerText: string;
        spellcheck: boolean;
        title: string;
        translate: boolean;
        attachInternals(): ElementInternals;
        click(): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K_1 extends keyof HTMLElementEventMap>(type: K_1, listener: (this: HTMLElement, ev: HTMLElementEventMap[K_1]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
        readonly attributes: NamedNodeMap;
        readonly classList: DOMTokenList;
        className: string;
        readonly clientHeight: number;
        readonly clientLeft: number;
        readonly clientTop: number;
        readonly clientWidth: number;
        id: string;
        readonly localName: string;
        readonly namespaceURI: string;
        onfullscreenchange: (this: Element, ev: Event) => any;
        onfullscreenerror: (this: Element, ev: Event) => any;
        outerHTML: string;
        readonly ownerDocument: Document;
        readonly part: DOMTokenList;
        readonly prefix: string;
        readonly scrollHeight: number;
        scrollLeft: number;
        scrollTop: number;
        readonly scrollWidth: number;
        readonly shadowRoot: ShadowRoot;
        slot: string;
        readonly tagName: string;
        attachShadow(init: ShadowRootInit): ShadowRoot;
        closest<K_2 extends keyof HTMLElementTagNameMap>(selector: K_2): HTMLElementTagNameMap[K_2];
        closest<K_3 extends keyof SVGElementTagNameMap>(selector: K_3): SVGElementTagNameMap[K_3];
        closest<E extends Element = Element>(selectors: string): E;
        getAttribute(qualifiedName: string): string;
        getAttributeNS(namespace: string, localName: string): string;
        getAttributeNames(): string[];
        getAttributeNode(qualifiedName: string): Attr;
        getAttributeNodeNS(namespace: string, localName: string): Attr;
        getBoundingClientRect(): DOMRect;
        getClientRects(): DOMRectList;
        getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
        getElementsByTagName<K_4 extends keyof HTMLElementTagNameMap>(qualifiedName: K_4): HTMLCollectionOf<HTMLElementTagNameMap[K_4]>;
        getElementsByTagName<K_5 extends keyof SVGElementTagNameMap>(qualifiedName: K_5): HTMLCollectionOf<SVGElementTagNameMap[K_5]>;
        getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
        getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
        getElementsByTagNameNS(namespace: string, localName: string): HTMLCollectionOf<Element>;
        hasAttribute(qualifiedName: string): boolean;
        hasAttributeNS(namespace: string, localName: string): boolean;
        hasAttributes(): boolean;
        hasPointerCapture(pointerId: number): boolean;
        insertAdjacentElement(where: InsertPosition, element: Element): Element;
        insertAdjacentHTML(position: InsertPosition, text: string): void;
        insertAdjacentText(where: InsertPosition, data: string): void;
        matches(selectors: string): boolean;
        releasePointerCapture(pointerId: number): void;
        removeAttribute(qualifiedName: string): void;
        removeAttributeNS(namespace: string, localName: string): void;
        removeAttributeNode(attr: Attr): Attr;
        requestFullscreen(options?: FullscreenOptions): Promise<void>;
        requestPointerLock(): void;
        scroll(options?: ScrollToOptions): void;
        scroll(x: number, y: number): void;
        scrollBy(options?: ScrollToOptions): void;
        scrollBy(x: number, y: number): void;
        scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
        scrollTo(options?: ScrollToOptions): void;
        scrollTo(x: number, y: number): void;
        setAttribute(qualifiedName: string, value: string): void;
        setAttributeNS(namespace: string, qualifiedName: string, value: string): void;
        setAttributeNode(attr: Attr): Attr;
        setAttributeNodeNS(attr: Attr): Attr;
        setPointerCapture(pointerId: number): void;
        toggleAttribute(qualifiedName: string, force?: boolean): boolean;
        webkitMatchesSelector(selectors: string): boolean;
        readonly baseURI: string;
        readonly childNodes: NodeListOf<ChildNode>;
        readonly firstChild: ChildNode;
        readonly isConnected: boolean;
        readonly lastChild: ChildNode;
        readonly nextSibling: ChildNode;
        readonly nodeName: string;
        readonly nodeType: number;
        nodeValue: string;
        readonly parentElement: HTMLElement;
        readonly parentNode: ParentNode;
        readonly previousSibling: ChildNode;
        textContent: string;
        appendChild<T extends Node>(node: T): T;
        cloneNode(deep?: boolean): Node;
        compareDocumentPosition(other: Node): number;
        contains(other: Node): boolean;
        getRootNode(options?: GetRootNodeOptions): Node;
        hasChildNodes(): boolean;
        insertBefore<T_1 extends Node>(node: T_1, child: Node): T_1;
        isDefaultNamespace(namespace: string): boolean;
        isEqualNode(otherNode: Node): boolean;
        isSameNode(otherNode: Node): boolean;
        lookupNamespaceURI(prefix: string): string;
        lookupPrefix(namespace: string): string;
        normalize(): void;
        removeChild<T_2 extends Node>(child: T_2): T_2;
        replaceChild<T_3 extends Node>(node: Node, child: T_3): T_3;
        readonly ATTRIBUTE_NODE: number;
        readonly CDATA_SECTION_NODE: number;
        readonly COMMENT_NODE: number;
        readonly DOCUMENT_FRAGMENT_NODE: number;
        readonly DOCUMENT_NODE: number;
        readonly DOCUMENT_POSITION_CONTAINED_BY: number;
        readonly DOCUMENT_POSITION_CONTAINS: number;
        readonly DOCUMENT_POSITION_DISCONNECTED: number;
        readonly DOCUMENT_POSITION_FOLLOWING: number;
        readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;
        readonly DOCUMENT_POSITION_PRECEDING: number;
        readonly DOCUMENT_TYPE_NODE: number;
        readonly ELEMENT_NODE: number;
        readonly ENTITY_NODE: number;
        readonly ENTITY_REFERENCE_NODE: number;
        readonly NOTATION_NODE: number;
        readonly PROCESSING_INSTRUCTION_NODE: number;
        readonly TEXT_NODE: number;
        dispatchEvent(event: Event): boolean;
        ariaAtomic: string;
        ariaAutoComplete: string;
        ariaBusy: string;
        ariaChecked: string;
        ariaColCount: string;
        ariaColIndex: string;
        ariaColSpan: string;
        ariaCurrent: string;
        ariaDisabled: string;
        ariaExpanded: string;
        ariaHasPopup: string;
        ariaHidden: string;
        ariaKeyShortcuts: string;
        ariaLabel: string;
        ariaLevel: string;
        ariaLive: string;
        ariaModal: string;
        ariaMultiLine: string;
        ariaMultiSelectable: string;
        ariaOrientation: string;
        ariaPlaceholder: string;
        ariaPosInSet: string;
        ariaPressed: string;
        ariaReadOnly: string;
        ariaRequired: string;
        ariaRoleDescription: string;
        ariaRowCount: string;
        ariaRowIndex: string;
        ariaRowSpan: string;
        ariaSelected: string;
        ariaSetSize: string;
        ariaSort: string;
        ariaValueMax: string;
        ariaValueMin: string;
        ariaValueNow: string;
        ariaValueText: string;
        animate(keyframes: Keyframe[] | PropertyIndexedKeyframes, options?: number | KeyframeAnimationOptions): Animation;
        getAnimations(options?: GetAnimationsOptions): Animation[];
        after(...nodes: (string | Node)[]): void;
        before(...nodes: (string | Node)[]): void;
        remove(): void;
        replaceWith(...nodes: (string | Node)[]): void;
        innerHTML: string;
        readonly nextElementSibling: Element;
        readonly previousElementSibling: Element;
        readonly childElementCount: number;
        readonly children: HTMLCollection;
        readonly firstElementChild: Element;
        readonly lastElementChild: Element;
        append(...nodes: (string | Node)[]): void;
        prepend(...nodes: (string | Node)[]): void;
        querySelector<K_6 extends keyof HTMLElementTagNameMap>(selectors: K_6): HTMLElementTagNameMap[K_6];
        querySelector<K_7 extends keyof SVGElementTagNameMap>(selectors: K_7): SVGElementTagNameMap[K_7];
        querySelector<E_1 extends Element = Element>(selectors: string): E_1;
        querySelectorAll<K_8 extends keyof HTMLElementTagNameMap>(selectors: K_8): NodeListOf<HTMLElementTagNameMap[K_8]>;
        querySelectorAll<K_9 extends keyof SVGElementTagNameMap>(selectors: K_9): NodeListOf<SVGElementTagNameMap[K_9]>;
        querySelectorAll<E_2 extends Element = Element>(selectors: string): NodeListOf<E_2>;
        replaceChildren(...nodes: (string | Node)[]): void;
        readonly assignedSlot: HTMLSlotElement;
        oncopy: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        oncut: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        onpaste: (this: DocumentAndElementEventHandlers, ev: ClipboardEvent) => any;
        readonly style: CSSStyleDeclaration;
        contentEditable: string;
        enterKeyHint: string;
        inputMode: string;
        readonly isContentEditable: boolean;
        onabort: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onanimationcancel: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationend: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationiteration: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onanimationstart: (this: GlobalEventHandlers, ev: AnimationEvent) => any;
        onauxclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onblur: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        oncanplay: (this: GlobalEventHandlers, ev: Event) => any;
        oncanplaythrough: (this: GlobalEventHandlers, ev: Event) => any;
        onchange: (this: GlobalEventHandlers, ev: Event) => any;
        onclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onclose: (this: GlobalEventHandlers, ev: Event) => any;
        oncontextmenu: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        oncuechange: (this: GlobalEventHandlers, ev: Event) => any;
        ondblclick: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        ondrag: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragend: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragenter: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragleave: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragover: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondragstart: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondrop: (this: GlobalEventHandlers, ev: DragEvent) => any;
        ondurationchange: (this: GlobalEventHandlers, ev: Event) => any;
        onemptied: (this: GlobalEventHandlers, ev: Event) => any;
        onended: (this: GlobalEventHandlers, ev: Event) => any;
        onerror: OnErrorEventHandlerNonNull;
        onfocus: (this: GlobalEventHandlers, ev: FocusEvent) => any;
        onformdata: (this: GlobalEventHandlers, ev: FormDataEvent) => any;
        ongotpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        oninput: (this: GlobalEventHandlers, ev: Event) => any;
        oninvalid: (this: GlobalEventHandlers, ev: Event) => any;
        onkeydown: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeypress: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onkeyup: (this: GlobalEventHandlers, ev: KeyboardEvent) => any;
        onload: (this: GlobalEventHandlers, ev: Event) => any;
        onloadeddata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadedmetadata: (this: GlobalEventHandlers, ev: Event) => any;
        onloadstart: (this: GlobalEventHandlers, ev: Event) => any;
        onlostpointercapture: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onmousedown: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseenter: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseleave: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmousemove: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseout: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseover: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onmouseup: (this: GlobalEventHandlers, ev: MouseEvent) => any;
        onpause: (this: GlobalEventHandlers, ev: Event) => any;
        onplay: (this: GlobalEventHandlers, ev: Event) => any;
        onplaying: (this: GlobalEventHandlers, ev: Event) => any;
        onpointercancel: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerdown: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerenter: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerleave: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointermove: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerout: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerover: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onpointerup: (this: GlobalEventHandlers, ev: PointerEvent) => any;
        onprogress: (this: GlobalEventHandlers, ev: ProgressEvent<EventTarget>) => any;
        onratechange: (this: GlobalEventHandlers, ev: Event) => any;
        onreset: (this: GlobalEventHandlers, ev: Event) => any;
        onresize: (this: GlobalEventHandlers, ev: UIEvent) => any;
        onscroll: (this: GlobalEventHandlers, ev: Event) => any;
        onsecuritypolicyviolation: (this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any;
        onseeked: (this: GlobalEventHandlers, ev: Event) => any;
        onseeking: (this: GlobalEventHandlers, ev: Event) => any;
        onselect: (this: GlobalEventHandlers, ev: Event) => any;
        onselectionchange: (this: GlobalEventHandlers, ev: Event) => any;
        onselectstart: (this: GlobalEventHandlers, ev: Event) => any;
        onslotchange: (this: GlobalEventHandlers, ev: Event) => any;
        onstalled: (this: GlobalEventHandlers, ev: Event) => any;
        onsubmit: (this: GlobalEventHandlers, ev: SubmitEvent) => any;
        onsuspend: (this: GlobalEventHandlers, ev: Event) => any;
        ontimeupdate: (this: GlobalEventHandlers, ev: Event) => any;
        ontoggle: (this: GlobalEventHandlers, ev: Event) => any;
        ontouchcancel?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchend?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchmove?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontouchstart?: (this: GlobalEventHandlers, ev: TouchEvent) => any;
        ontransitioncancel: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionend: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionrun: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        ontransitionstart: (this: GlobalEventHandlers, ev: TransitionEvent) => any;
        onvolumechange: (this: GlobalEventHandlers, ev: Event) => any;
        onwaiting: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationend: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationiteration: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkitanimationstart: (this: GlobalEventHandlers, ev: Event) => any;
        onwebkittransitionend: (this: GlobalEventHandlers, ev: Event) => any;
        onwheel: (this: GlobalEventHandlers, ev: WheelEvent) => any;
        autofocus: boolean;
        readonly dataset: DOMStringMap;
        nonce?: string;
        tabIndex: number;
        blur(): void;
        focus(options?: FocusOptions): void;
    };
    readonly styles: {
        _$cssResult$: boolean;
        cssText: any;
        readonly styleSheet: any;
        toString(): any;
    };
    readonly properties: {
        keys: {
            type: ObjectConstructor;
            reflect: boolean;
        };
        depth: {
            type: NumberConstructor;
            reflect: boolean;
        };
        onClick: {
            type: FunctionConstructor;
            reflect: boolean;
        };
        input: {
            type: BooleanConstructor;
        };
    };
    finalized: boolean;
    _$litElement$: boolean;
    addInitializer(t5: any): void;
    l: any[];
    readonly observedAttributes: any[];
    createProperty(t5: any, i7?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t5: any, i7: any): any;
            fromAttribute(t5: any, i7: any): any;
        };
        reflect: boolean;
        hasChanged: (t5: any, i7: any) => boolean;
    }): void;
    getPropertyDescriptor(t5: any, i7: any, s6: any): {
        get(): any;
        set(e8: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    getPropertyOptions(t5: any): any;
    finalize(): boolean;
    elementProperties: Map<any, any>;
    _$Eu: Map<any, any>;
    elementStyles: any[];
    finalizeStyles(i7: any): any[];
    _$Eh(t5: any, i7: any): string;
    shadowRootOptions: {
        mode: string;
    };
};
declare var instances_exports: {};
export var slotGrid: {
    _$cssResult$: boolean;
    cssText: any;
    readonly styleSheet: any;
    toString(): any;
};
declare var streams_exports: {};
export var tabStyle: {
    _$cssResult$: boolean;
    cssText: any;
    readonly styleSheet: any;
    toString(): any;
};
export { Spectrogram2 as Spectrogram, TimeSeries2 as TimeSeries, instances_exports as global, streams_exports as streams };
