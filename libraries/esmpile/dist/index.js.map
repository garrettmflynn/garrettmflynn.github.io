{
  "version": 3,
  "sources": ["../src/index.js", "../src/utils/path.js", "../src/utils/mimeTypes.js", "../src/utils/defaults.js", "../src/utils/nodeModules.js", "../src/utils/sourceMap.js", "../src/utils/transformations.js", "../src/utils/errors.js", "../src/utils/handlers.js", "../src/utils/request.js", "../src/utils/response.js", "../src/utils/load.js", "../src/Bundle.js", "../src/utils/encode/index.js", "../src/utils/encode/datauri.js", "../src/utils/encode/objecturl.js", "../src/utils/compile.js", "../src/utils/polyfills.js", "../../esc/standards.js", "../.temp/temp_index.js"],
  "sourcesContent": ["import * as pathUtils from \"./utils/path.js\";\nimport * as nodeModules from './utils/nodeModules.js'\nimport * as sourceMap from './utils/sourceMap.js'\nimport * as load from './utils/load.js'\nimport * as bundle from \"./Bundle.js\";\n\nexport const resolve = pathUtils.get\nexport const path = pathUtils\n\n// ------------- OOP Usage -------------\nexport const Bundle = bundle.default\n\n// ------------- Functional Usage -------------\nexport const compile = async (uri, opts = {}) => {\n    opts = Object.assign({}, opts) // copy options\n    const thisBundle = bundle.get(uri, opts) // grab or create bundle\n    await thisBundle.resolve()\n    return thisBundle.result;\n};\n\nexport default compile\n\nexport {\n    sourceMap,\n    nodeModules,\n    load,\n    bundle,\n}", "import * as mimeTypes from './mimeTypes.js'\nimport defaults from './defaults.js'\n\nconst urlSep = '://'\n\nexport const get = (path, rel = '', keepRelativeImports=false, isDirectory = false) => {\n\n    if (url(path)) return path\n    // if (!path.includes('./')) rel = '' // absolute\n\n    let prefix = ''\n    const getPrefix = (str) => {\n        prefix = (str.includes(urlSep)) ? str.split(urlSep).splice(0,1) : undefined\n        if (prefix) return str.replace(`${prefix}${urlSep}`, '')\n        else return str\n    }\n\n    if (path.includes(urlSep)) path = getPrefix(path)\n    if (rel.includes(urlSep)) rel = getPrefix(rel)\n\n    if (!keepRelativeImports) rel = rel.split('/').filter(v => v != '..').join('/') // Remove leading ..\n\n    if (rel[rel.length - 1] === '/') rel = rel.slice(0, -1) // Remove trailing slashes\n\n    let dirTokens = rel.split('/')\n    if (dirTokens.length === 1 && dirTokens[0] === '') dirTokens = [] // Remove consequence of empty string rel\n\n    if (!isDirectory){\n        const potentialFile = dirTokens.pop() // remove file name\n        if (potentialFile) {\n            const splitPath = potentialFile.split('.')\n        if (splitPath.length == 1 || (splitPath.length > 1 && splitPath.includes(''))) dirTokens.push(potentialFile) // ASSUMPTION: All files have an extension\n        }\n    }\n\n    const splitPath = path.split(\"/\")\n    const pathTokens = splitPath.filter((str, i) => !!str) // remove bookend slashes\n\n    const extensionTokens = pathTokens.filter((str, i) => {\n        if (str === '..') {\n            dirTokens.pop() // Pop off directories\n            return false\n        } else if (str === '.') return false\n        else return true\n    })\n\n    // Concatenate with windowLocation if rel matched OR no rel and path matched...\n    const newPath = [...dirTokens, ...extensionTokens].join('/')\n\n\n    // Add prefix back if it exists\n    if (prefix) return prefix + '://' + newPath\n    else return newPath\n}\n\n\nexport function absolute(uri, urlWorks) {\n    const absolutePath = uri[0] !== \".\";\n    const isRemote = url(uri);\n    return absolutePath && (urlWorks || !isRemote)\n}\n\nexport function url(uri) {\n    try {\n        new URL(uri)\n        return true\n    } catch {\n        return false\n    }\n}\n\nexport const extension = (path) => {\n    const ext = path.split('/').slice(-1)[0].split(\".\").slice(-1)[0];\n    if (mimeTypes.map[ext]) return ext\n}\n\n\n// Remove File Name\nexport const base = (str) => str.substring(0, str.lastIndexOf(\"/\"));\n\n\nexport const noBase = (path, opts, removeNode) => {\n\n    path = (globalThis.location) ? path.replace(`${base(globalThis.location.href)}/`, \"./\") : path\n\n    const absolutePath = absolute(path, true)\n    const relativeTo = opts.relativeTo ?? defaults.nodeModules.relativeTo\n    const nodeModulePath = opts.nodeModules ?? defaults.nodeModules.nodeModules\n    \n    // Pass Absolute\n    if (absolutePath) return path\n\n    // Keep Relative\n    else {\n        let noBase = path\n        if (removeNode) noBase = noBase.replace(`${nodeModulePath}/`, \"\")\n        noBase = noBase.replace(`${relativeTo.split(\"/\").slice(0, -1).join(\"/\")}/`, \"\");\n        if (noBase[0] !== '.') noBase = `./${noBase}`\n        return noBase\n    }\n}\n\nexport const pathId = (path, opts) => get(noBase(path,opts))\n\n", "// Mime Type Resolution\nexport const js = 'application/javascript'\nexport const isJS = (type) => !type || type === 'application/javascript'\nexport const map = {\n    'js': js,\n    'mjs': js,\n    'cjs': js,\n    \"ts\": \"text/typescript\",\n    'json': \"application/json\",\n    'html': 'text/html',\n    'css': 'text/css',\n    'txt': 'text/plain',\n    'svg': 'image/svg+xml',\n    'png': 'image/png',\n    'jpg': 'image/jpeg',\n    'jpeg': 'image/jpeg',\n    'gif': 'image/gif',\n    'webp': 'image/webp',\n\n    'mp3': 'audio/mpeg',\n    'mp4': 'video/mp4',\n    'webm': 'video/webm',\n    'ogg': 'application/ogg',\n    'wav': 'audio/wav'\n}\n\nexport const get = (extension) => map[extension]\n", "export default {\n    nodeModules: {\n        nodeModules: \"node_modules\",\n        relativeTo: \"./\"\n    }\n}", "import * as pathUtils from './path.js'\nimport defaults from './defaults.js'\n\nexport const path = (opts) => {\n    const nodeModules = opts.nodeModules ?? defaults.nodeModules.nodeModules;\n    const relativeTo = opts.relativeTo ?? defaults.nodeModules.relativeTo;\n    return pathUtils.get(nodeModules, relativeTo)\n}\n\nexport const resolve = async (uri, opts) => {\n    const absoluteNodeModules = path(opts)\n\n    const split = uri.split('/')\n    let base = pathUtils.get(uri, absoluteNodeModules);\n\n\n    if (split.length > 1) {\n        const hasExt = pathUtils.extension(base)\n        if (hasExt) return base // not a base node-module\n        else base += '/package.json' // otherwise might have an associated package.json\n    }\n\n\n    return await getMainPath(uri, base, opts).catch(e => {\n        console.warn(`${base} does not exist or is not at the root of the project.`);\n    })\n};\n\nconst getPath = (str, path, base) => pathUtils.get(str, base, false, path.split(\"/\").length === 1);\n\nconst getPackagePath = (path, base = path) => getPath(\"package.json\", path, base)\n\nexport const getMainPath = async (path, base = path, opts={}) => {\n    const pkg = await getPackage(path, base, opts)\n    if (!pkg) return base\n    const destination = pkg.module || pkg.main || \"index.js\";\n    return getPath(destination, path, base);\n}\n\nconst getPackage = async (path, base = path, opts) => {\n    const pkgPath = getPackagePath(path, base)\n    const isURL = pathUtils.url(pkgPath)\n    const correct = isURL ? pkgPath : new URL(pkgPath, window.location.href).href\n        // const correct = isURL ? pkgPath : pathUtils.get(pkgPath, opts)\n\n    return (await import(correct, { assert: { type: \"json\" } })).default;\n}\n\n// Export the Related Transformation\nexport const transformation = {\n    name: 'node_modules',\n    handler: resolve\n}\n", "import * as pathUtils from './path.js'\nimport * as response from './response.js'\n\n// source map regex\nconst sourceReg = /\\/\\/# sourceMappingURL=(.*\\.map)/\n\nexport const get = async (uri, opts, text, evaluate = true) => {\n\n    if (!text) {\n        const info = await response.get(uri, opts) // get text\n        text = info.text.original\n    }\n\n    if (text) {\n        const srcMap = text.match(sourceReg)\n\n        if (srcMap) {\n            const getMap = async () => {\n                const loc = pathUtils.get(srcMap[1], uri);\n                let info = await response.get(loc, opts) // get text\n                let newText = info.text.original\n\n                // remove source map invalidation\n                if (newText.slice(0, 3) === \")]}\") {\n                    console.warn('Removing source map invalidation characters')\n                    newText = newText.substring(newText.indexOf('\\n'));\n                }\n\n                // return source map\n                const outInfo = { result: JSON.parse(newText) }\n                outInfo.text = {original: newText, updated: null}\n                return outInfo\n            }\n\n            return evaluate ? getMap() : getMap\n        }\n    }\n}", "import { transformation } from \"./nodeModules.js\"\nimport * as pathUtils from \"./path.js\"\n\nconst extensionTransformations = ['ts', 'js']\n\nconst allTransformations = [null, ...extensionTransformations, transformation]\n\n\nexport const get = (uri) => {\n    const pathExt = pathUtils.extension(uri)\n    const abs = pathUtils.absolute(uri)\n    const baseNodeModule = (abs) ? uri.split('/').length === 1 : false\n\n    const noExt = !pathExt\n\n\n    // Both Extension and Path Change (Potential Node Modules)\n    if (!baseNodeModule && abs && noExt) {\n\n        const mapped = extensionTransformations.map(ext => {\n\n            return {\n                extension: ext,\n                name: `${transformation.name} + ${ext}`,\n                handler: transformation.handler\n            }\n        })\n\n        // Likely a Node Module (package.json)\n        if (uri.split('/').length === 1) return [transformation, uri, ...mapped]\n\n        // Likely a CDN link or File. Maybe a Node Module (package.json)\n        else return [uri, ...mapped, transformation]\n    }\n\n    // Path Change First\n    else if (abs) return [...allTransformations].reverse()\n\n    // Extension Changes First\n    else if (noExt) return [...allTransformations]\n\n    else return []\n}", "const middle = \"was not resolved locally. You can provide a direct reference to use in\";\nexport const create = (uri, key = uri) => new Error(`${uri} ${middle} options.filesystem._fallbacks['${key}'].`)", "import * as errors from './errors.js'\nimport * as pathUtils from './path.js';\n\nexport const noExtension = (path, repExt = 'js') => {\n    const absolutePath = pathUtils.absolute(path);\n    const split = path.split('/')\n    const ext = pathUtils.extension(path)\n    if (!absolutePath || (absolutePath && split.length > 1)) {\n        if (!ext) return `${path}.${repExt}` // use alternative extension\n    }\n\n    return path\n}\n\nexport const transformation = async (path, transformation, opts, force) => {\n    if (!transformation) return path\n    const type = typeof transformation\n    if (type === 'string' && (!force || force === 'string')) {\n        return noExtension(path, transformation)\n    }\n    else if (type === 'object' && (!force || force === 'object')) {\n        if (transformation.extension) path = noExtension(path, transformation.extension) // first transform with the extension\n        return await transformation.handler(path, opts).catch(e => {\n            throw errors.create(path, pathUtils.noBase(path, opts))\n        })\n    }\n}", "import * as pathUtils from \"./path.js\"\n\nexport const getURL = (path) => {\n    let url\n    try { url = new URL(path).href }\n    catch { url = pathUtils.get(path, globalThis.location.href) }\n    return url\n}\n\nexport const handleFetch = async (path, options = {}) => {\n    if (!options.fetch) options.fetch = {}\n    if (!options.fetch.mode) options.fetch.mode = 'cors' // Auto-CORS Support\n    const url = getURL(path)\n\n    const progressCallback = options?.callbacks?.progress?.fetch\n\n    const info = await fetchRemote(url, options, {\n        path,\n        progress: progressCallback\n    })\n    if (!info.buffer) throw new Error('No response received.')\n    const type = info.type.split(';')[0] // Get mimeType (not fully specified)\n\n    return {\n        ...info,\n        url,\n        type,\n    }\n}\n\nexport const fetchRemote = async (url, options = {}, additionalArgs) => {\n\n    const path = additionalArgs.path ?? url\n    const pathId = pathUtils.get(pathUtils.noBase(path, options))\n\n    const response = await globalThis.fetch(url, options.fetch)\n\n    let bytesReceived = 0\n    let buffer = [];\n    let bytes = 0;\n\n    const hasProgressFunction  = typeof additionalArgs.progress === 'function'\n    const info = await new Promise(async (resolve) => {\n\n        if (response) {\n\n\n            bytes = parseInt(response.headers.get('Content-Length'), 10)\n            const type = response.headers.get('Content-Type')\n\n            // Browser Remote Parser\n            if (globalThis.REMOTEESM_NODE) {\n                const buffer = await response.arrayBuffer()\n                resolve({ buffer, type })\n            }\n\n            // Browser Remote Parser\n            else {\n\n                const reader = response.body.getReader();\n\n                const processBuffer = async ({ done, value }) => {\n\n                    if (done) {\n                        const config = {}\n                        if (typeof type === 'string') config.type = type\n                        const blob = new Blob(buffer, config)\n                        const ab = await blob.arrayBuffer()\n                        resolve({ buffer: new Uint8Array(ab), type })\n                        return;\n                    }\n\n                    bytesReceived += value.length;\n                    const chunk = value;\n                    buffer.push(chunk);\n\n                    if (hasProgressFunction) additionalArgs.progress(pathId, bytesReceived, bytes, null, null, response.headers.get('Range'))\n\n                    // Read some more, and call this function again\n                    return reader.read().then(processBuffer)\n                }\n\n                reader.read().then(processBuffer)\n            }\n\n        } else {\n            console.warn('Response not received!', options.headers)\n            resolve(undefined)\n        }\n    })\n\n\n    const output = {\n        response,\n        ...info\n    }\n\n    if (hasProgressFunction) {\n        const status = [null, null]\n        if (response.ok) status[0] = output\n        else status[1] = output\n        additionalArgs.progress(pathId, bytesReceived, bytes, ...status, response.headers.get('Range')) // Send Done\n    }\n\n\n    return output\n}", "import * as transformations from './transformations.js'\nimport * as handlers from './handlers.js'\nimport * as pathUtils from \"./path.js\";\nimport { handleFetch } from \"./request.js\";\n\n// Get ESM Module Info\nconst enc = new TextDecoder(\"utf-8\");\nexport const get = async (uri, opts, expectedType) => {\n\n    // Node\n    const info = { uri, text: {original: '', updated: ''}, buffer: null }\n    if (globalThis.REMOTEESM_NODE){\n        const absPath = uri.replace('file://', '')\n        info.buffer = globalThis.fs.readFileSync(absPath)\n        info.text.original = info.text.updated = enc.decode(info.buffer)\n    } \n\n    // Browser\n    else {\n        const fetchInfo = await handleFetch(uri, opts)\n        const response = fetchInfo.response\n\n        info.response = response\n        if (response.ok) {\n            if (expectedType) {\n                const mimeType = response.headers.get(\"Content-Type\")\n                if (!mimeType.includes(expectedType)) throw new Error(`Expected Content Type ${expectedType} but received ${mimeType} for  ${uri}`)\n            }\n\n            info.buffer = fetchInfo.buffer\n            info.text.original = info.text.updated = enc.decode(info.buffer)\n        } else {\n            throw new Error(response.statusText)\n        }\n    }\n\n    return info\n}\n\nexport const find = async(uri, opts, callback) => {\n    \n     // Try Alternative File Paths\n     const transArray = transformations.get(uri)\n\n     let response;\n \n     if (transArray.length > 0) {\n         do {\n             const ext = transArray.shift()\n \n             const name = ext?.name ?? ext\n             const warning = (e) => {\n                 if (opts.debug) console.error(`Import using ${name ?? ext} transformation failed for ${uri}`)\n             }\n \n             const transformed = await handlers.transformation(uri, ext, opts)\n             const correctURI = pathUtils.get(transformed, opts.relativeTo)\n             const expectedType = (ext) ? null : 'application/javascript'\n             response = await callback(correctURI, opts, expectedType).then(res => {\n                if (opts.debug) console.warn(`Import using ${name ?? ext} transformation succeeded for ${uri}`)\n                return res\n            }).catch(warning)\n         } while (!response && transArray.length > 0)\n \n         if (!response) throw new Error(`No valid transformation found for ${uri}`)\n     }\n \n     // Get Specified URI Directly\n     else response = await callback(pathUtils.get(uri, opts.relativeTo), opts);\n\n    return response\n}\n\n\nexport const findModule = async (uri, opts) => {\n    const pathExt = pathUtils.extension(uri)\n    const isJSON = pathExt === \"json\";\n\n    const info = {}\n    await find(uri, opts, async (transformed) => {\n        info.uri = transformed\n        info.result = await (isJSON ? import(transformed, { assert: { type: \"json\" } }) : import(transformed))\n    })\n\n    return info\n}\n\n// Get ESM Module Text\nexport const findText = async (uri, opts) => await find(uri, opts, get)", "export const script = async (uri) => {\n    return await new Promise(((resolve, reject) => {\n\n        const script = document.createElement('script')\n\n        let r = false\n        script.onload = script.onreadystatechange = function () {\n            if (!r && (!this.readyState || this.readyState == 'complete')) {\n                r = true\n                resolve(window)\n            }\n        }\n\n        script.onerror = reject\n\n        script.src = uri;\n        document.body.insertAdjacentElement('beforeend', script)\n    }))\n}\n", "import * as pathUtils from './utils/path.js'\nimport * as encode from \"./utils/encode/index.js\";\nimport * as mimeTypes from \"./utils/mimeTypes.js\";\nimport * as compile from \"./utils/compile.js\"\nimport * as response from \"./utils/response.js\"\nimport * as nodeModules from './utils/nodeModules.js'\nimport * as errors from './utils/errors.js'\nimport * as polyfills from './utils/polyfills.js'\nimport * as sourceMap from './utils/sourceMap.js';\nimport { esSourceKey } from '../../esc/standards.js';\n\nif (!globalThis.REMOTEESM_BUNDLES) globalThis.REMOTEESM_BUNDLES = {global: {}} // Share references between loaded dataurl instances\nconst global = globalThis.REMOTEESM_BUNDLES.global\n\nconst noEncoding = `No buffer or text to bundle for`\n\nconst toWait = 10000\nconst waitedFor = (toWait/1000).toFixed(1)\n\nconst esSourceString = (bundle) => `\nexport const ${esSourceKey} = () => globalThis.REMOTEESM_BUNDLES[\"${bundle.collection}\"][\"${bundle.name}\"];\n` // Export bundle from module...\n\n// Import ES6 Modules (and replace their imports with actual file imports!)\n// TODO: Handle exports without stalling...\n// const re = /[^\\n]*(?<![\\/\\/])(import|export)\\s+([ \\t]*(?:(?:\\* (?:as .+))|(?:[^ \\t\\{\\}]+[ \\t]*,?)|(?:[ \\t]*\\{(?:[ \\t]*[^ \\t\"'\\{\\}]+[ \\t]*,?)+\\}))[ \\t]*)from[ \\t]*(['\"])([^'\"\\n]+)(?:['\"])([ \\t]*assert[ \\t]*{[ \\n\\t]*type:[ \\n\\t]*(['\"])([^'\"\\n]+)(?:['\"])[\\n\\t]*})?/gm\nconst re = /[^\\n]*(?<![\\/\\/])(import)\\s+([ \\t]*(?:(?:\\* (?:as .+))|(?:[^ \\t\\{\\}]+[ \\t]*,?)|(?:[ \\t]*\\{(?:[ \\t]*[^ \\t\"'\\{\\}]+[ \\t]*,?)+\\}))[ \\t]*)from[ \\t]*(['\"])([^'\"\\n]+)(?:['\"])([ \\t]*assert[ \\t]*{[ \\n\\t]*type:[ \\n\\t]*(['\"])([^'\"\\n]+)(?:['\"])[\\n\\t]*})?;?/gm\nexport function get(url, opts=this.options){\n    const pathId = (url) ? pathUtils.pathId(url, opts) : undefined // Set Path ID\n    let ref = globalThis.REMOTEESM_BUNDLES[opts.collection]\n    if (!ref) ref = globalThis.REMOTEESM_BUNDLES[opts.collection] = {}\n    let bundle = ref[pathId]\n    if (!bundle)  bundle =  new Bundle(url, opts)\n    else if (opts) bundle.options = opts // Reset options\n    return bundle\n}\n\nconst promiseInfo = {\n    resolve: undefined,\n    reject: undefined,\n    promise: undefined\n}\n\n\nexport default class Bundle {\n\n    filename = 'bundle.esmpile.js'\n\n    promises = {\n        encoded: Object.assign({},promiseInfo),\n        result: Object.assign({},promiseInfo)\n    }\n\n    uri;\n\n    #url \n    get url() { return this.#url }\n    set url(url) {\n        const ESMPileInternalOpts = this.options._esmpile\n        if (!ESMPileInternalOpts.entrypoint) ESMPileInternalOpts.entrypoint = this\n\n        if (!this.uri) this.uri = url // set original uri\n\n        // Transform for absolute targeting\n        const isAbsolute = pathUtils.absolute(url, true)\n        if (!isAbsolute && !url.includes(this.#options.relativeTo)) url = pathUtils.get(url, this.#options.relativeTo)\n        this.#url = url\n        const pathId = pathUtils.pathId(this.url, this.options)\n        if (this.name !== pathId) this.name = pathId // derive a name\n        this.updateCollection(this.options.collection)\n    }\n\n    status = null\n    #options\n    get options() {return this.#options}\n    set options(opts={}) {\n\n            if (!opts._esmpile) opts._esmpile = this.#options?._esmpile ?? {circular: new Set()} // keep internal information\n\n            \n            if (!opts.collection) opts.collection = this.#options?.collection // keep collection\n\n            this.#options = opts\n\n            if (!opts.output) opts.output = {}\n\n            // ------------------- Set Bundler -------------------\n            this.bundler = opts.bundler\n\n            // ------------------- Set Bundle Collection -------------------\n            this.updateCollection(this.options.collection)\n\n            // ------------------- Derived Properties -------------------\n            if (typeof opts?.callbacks?.progress?.file === 'function') this.callbacks.file = opts.callbacks.progress.file\n\n\n            // Default Fetch Options\n            if (!opts.fetch) opts.fetch = {}\n            opts.fetch = Object.assign({}, opts.fetch) // shallow copy\n            opts.fetch.signal = this.controller.signal\n    }\n\n    controller = new AbortController()\n\n    // ------------------- Toggle Bundle Encoding -------------------\n    #bundler;\n    get bundler() { return this.#bundler }\n    set bundler(bundler) {\n        this.setBundleInfo(bundler)\n        this.setBundler(bundler, false)\n    }\n\n    setBundleInfo = (bundler) => {\n        this.#options._esmpile.lastBundler = this.#bundler\n        this.#bundler = this.#options.bundler = bundler\n\n        const output = this.#options.output\n        if (bundler) {\n            output[bundler] = true // default bundler option to true\n            output.text = true\n        }\n\n        this.derived.compile = !this.#options.forceNativeImport && (output.text || output.datauri || output.objecturl)\n    }\n\n    setBundler = async (bundler, setInfo = true) => {\n            if (setInfo) this.setBundleInfo(bundler)\n\n            const innerInfo = this.#options._esmpile\n            const lastBundleType = innerInfo.lastBundle\n\n            const isSame = innerInfo.lastBundle === bundler\n            if (\n                !isSame  // if bundler has changed\n                || (innerInfo.lastBundle && isSame && !lastBundleType) // no last bundle type (when expected)\n            ) {\n\n                const entrypoint = innerInfo.entrypoint\n                if (bundler) {\n                    const entries = Array.from(this.dependencies.entries())\n\n                    if (entries.length) {\n                        await Promise.all((entries).map(async ([_, entry]) => {\n                            entry.bundler = bundler\n                            await entry.result\n                        })) // set bundler for all entries\n                    }\n\n                    // console.warn('Awaited all!', this.uri)\n\n                }\n\n                const isComplete = ['success', 'failed']\n                if (isComplete.includes(entrypoint?.status)) {\n                    // console.log('Creating a promise')\n                    if (!bundler) this.result = await this.resolve() // Direct Import\n                    else if (lastBundleType) this.encoded = await this.bundle(lastBundleType) // Swap Bundler Type\n                    else this.result = await this.resolve() // Full Resolution\n                }\n            }\n    }\n\n    // Name Property\n    #name;\n    get name() { return this.#name }\n    set name (name) {\n\n        // set new name\n        if (name !== this.#name){\n\n            // remove existing reference\n            let collection = globalThis.REMOTEESM_BUNDLES[this.collection]\n            if (collection){\n                if (global[this.name] === collection[this.name]) delete global[this.name] // delete from global collection\n                delete collection[this.name] // delete from parent collection\n            }\n\n            this.#name = name\n\n            // set filename\n            let filename = name.split('/').pop()\n            const components = filename.split('.')\n            this.filename = [...components.slice(0,-1), 'esmpile', 'js'].join('.')\n\n\n            // register in global\n            if (!global[this.name]) global[this.name] = this\n            else if (\n                this.options.collection != 'global'\n                //  && this.options.debug\n            ) console.warn(`Duplicating global bundle (${this.name})`, this.name)\n        }\n    }\n\n    // Register Bundle in Collection\n    #collection;\n    get collection() { return this.#collection }\n    set collection(collection) {\n\n        // if (collection !== this.#collection) {\n        this.#collection = collection\n        let ref = globalThis.REMOTEESM_BUNDLES[collection]\n            if (!ref) ref = globalThis.REMOTEESM_BUNDLES[collection] = {}\n            if (this.name) {\n                if (!ref[this.name]) ref[this.name] = this\n                else if (\n                    ref[this.name] !== this\n                ) console.warn(`Trying to duplicate bundle in bundle ${collection} (${this.name})`, this.name)\n            } //else console.warn('No name to set collection')\n        // }\n    }\n\n    // Update Bundle\n    #text\n    #buffer\n    get text() {\n        return this.#text ?? this.info.text.original\n    }\n    set text(text) {\n        this.#text = text\n        this.encoded = this.bundle('text').catch(e => { \n            if (!e.message.includes(noEncoding)) throw e \n        }) \n    }\n\n    set buffer(buffer) {\n        this.#buffer = buffer\n        this.encoded = this.bundle('buffer').catch(e => { if (!e.message.includes(noEncoding)) throw e }) // New info creates new bundle\n    }\n\n    dependencies = new Map()\n    dependents = new Map()\n\n    get entries(){\n\n        let entries = []\n\n        const drill = (target) => {\n            target.dependencies.forEach(o => {\n                if (!entries.includes(o) && o !== this) {\n                    entries.push(o)\n                    drill(o)\n                }\n            })\n        }\n\n        drill(this)\n\n        return entries\n    }\n\n    encodings = {}\n\n    info = {}\n\n    imports = []\n\n    link = undefined\n    result = undefined\n\n    callbacks = {\n        file: undefined,\n    }\n\n    derived = {\n        compile: false,\n        dependencies: {n: 0, resolved: 0}\n    }\n\n    constructor(entrypoint, options={}) {\n\n        this.options = options\n        this.url = entrypoint\n    }\n\n    import = async () => {\n\n        this.status = 'importing'\n\n         const info = await response.findModule(this.url, this.options)\n        \n         \n         // Direct import was successful\n         if (info?.result) return info.result\n         else this.status = 'fallback'\n    }\n\n    get = get\n\n    compile = async () => {\n\n        this.status = 'compiling'\n\n        await polyfills.ready // Make sure fetch is ready\n\n        try {\n            \n            const info = await response.findText(this.url, this.options).catch(e => { throw e })\n\n            try {\n\n                if (info){\n                    this.info = info\n                    this.url = this.info.uri // reset this bundle's name\n                    this.buffer = this.info.buffer\n                    await this.encoded // resolve after successful encoding  \n                }\n            }\n\n            // ------------------- Replace Nested Imports -------------------\n            catch (e) {\n\n                // console.warn('initial error', e)\n\n                // ------------------- Get Import Details -------------------\n                this.imports = {} // permanent collection of imports\n                const imports = [] // temporary\n                const matches = Array.from(this.info.text.updated.matchAll(re))\n                matches.forEach(([original, prefix, command, delimiters, path]) => {\n\n                    if (path){\n                        const wildcard = !!command.match(/\\*\\s+as/);\n                        const variables = command.replace(/\\*\\s+as/, \"\").trim();\n\n                        const absolutePath = pathUtils.absolute(path)\n                        let name = (absolutePath) ? path : pathUtils.get(path, this.url);\n                        const absNode = nodeModules.path(this.options)\n                        name = name.replace(`${absNode}/`, '')\n    \n                        const info = {\n                            name,\n                            path,\n                            prefix,\n                            variables,\n                            wildcard,\n                            current: {\n                                line: original,\n                                path\n                            },\n                            original,\n                            counter: 0,\n                            bundle: null\n                        }\n            \n                        if (!this.imports[name]) this.imports[name] = [];\n                        this.imports[name].push(info)\n                        imports.push(info)\n                    }\n                })\n\n                this.derived.dependencies.resolved = 0\n                this.derived.dependencies.n = this.imports.length\n\n                // ------------------- Import Files Asynchronously -------------------\n                const promises = imports.map(async (info, i) => {\n                    await this.setImport(info, i)\n                    this.derived.dependencies.resolved++\n                })\n\n                await Promise.all(promises)\n\n                this.text = this.info.text.updated // trigger recompilation from text\n            }\n\n        } \n        // ------------------- Catch Aborted Requests -------------------\n        catch (e) {\n            // console.log('compile error', e)\n            throw e\n        }\n\n        await this.encoded\n\n        return this.result\n    }\n\n    updateImport = (info, encoded) => {\n        \n        if (encoded === info.current.path) return\n        const { prefix, variables, wildcard, bundle } = info;\n\n        let newImport = '';\n        // ----------- Native Imports -----------\n        if (typeof encoded === \"string\") newImport = `${prefix} ${wildcard ? \"* as \" : \"\"}${variables} from \"${encoded}\"; // Imported from ${bundle.name}\\n\\n`\n\n        // ----------- Passed by Reference (e.g. fallbacks) -----------\n        else {\n            \n            const replaced = variables.replace('{', '').replace('}', '')\n            const exportDefault = (replaced === variables) ? true : false\n            const splitVars = variables.replace('{', '').replace('}', '').split(',').map(str => str.trim())\n\n            const insertVariable = (variable) => {\n                let end = ''\n                if (!wildcard) {\n                    if (exportDefault) end = `.default`\n                    else end = `.${variable}`\n                }\n                newImport += `${prefix === 'import' ? '' : 'export '}const ${variable} = (await globalThis.REMOTEESM_BUNDLES[\"${bundle.collection}\"][\"${bundle.name}\"].result)${end};\\n\\n`;\n            }\n\n            splitVars.forEach(insertVariable)\n        }\n\n        // Update Line Text\n        this.info.text.updated = this.info.text.updated.replace(info.current.line, newImport)\n\n        info.current.line = newImport\n        info.current.path = encoded\n\n    }\n\n    setImport = async (info) => {\n            let path = info.path        \n            let correctPath = info.name\n\n            // Get Dependency Bundle\n            const bundle = this.get(correctPath) \n            info.bundle = bundle\n\n            this.addDependency(bundle)\n    \n            // Get Bundle Value\n            if (!bundle.status) {\n                const options = { output: {}, ...this.options }\n                options.output.text = true // import from text\n                const newBundle = await this.get(correctPath, options)\n                await newBundle.resolve(path)\n            } else {\n                // console.log('waiting...', this.uri, bundle.uri)\n\n                let done = false\n\n                setTimeout(() => {\n                    if (done) return\n                    console.error(`Took too long (${waitedFor}s)...`, bundle.uri)\n                    bundle.promises.result.reject()\n                    bundle.promises.encoded.reject()\n                }, toWait)\n                \n                await bundle.result // wait for bundle to resolve\n                // console.log('done!', this.uri, bundle.uri)\n                done = true\n\n            }\n    \n            // Update Original Input Texts\n            const encoded = await bundle.encoded \n\n            this.updateImport(info, encoded)\n\n            return bundle\n    }\n\n    notify = (done, failed) => {\n\n        const isDone = done !== undefined\n        const isFailed = failed !== undefined\n\n        // ------------------- Tell the User the File is Done -------------------\n        if (this.callbacks.file) this.callbacks.file(this.name, this.derived.dependencies.resolved, this.derived.dependencies.n, isDone ? this : undefined, isFailed ? failed : undefined) \n    }\n\n    get buffer() {return this.#buffer}\n\n\n    // Get Encoded Promise\n    bundle = (type=\"buffer\") => {\n\n        const isText = type === \"text\"\n        this.options._esmpile.lastBundle = type // register last bundle type\n        this.promises.encoded.promise = new Promise (async (resolve, reject) => {\n\n            this.promises.encoded.resolve  = resolve\n            this.promises.encoded.reject  = reject\n\n            try {\n\n            let bufferOrText = (isText) ? this.info.text.updated :  this.buffer \n\n                if (!bufferOrText) {\n                    if (this.info.fallback) this.encoded = this.info.fallback\n                    else reject(new Error(`${noEncoding} ${this.name}`))\n                }\n        \n                // Compile Code\n                const pathExt = pathUtils.extension(this.url)\n                let mimeType = mimeTypes.get(pathExt)\n                switch (mimeType) {\n                    case 'text/typescript':\n                        bufferOrText = compile.typescript(this.info, type)\n                        mimeType = mimeTypes.js\n                        break;\n                }\n\n                if (mimeType === mimeTypes.js) {\n                    // Always Add Custom Export\n                    const srcStr = esSourceString(this)\n\n                    let text = bufferOrText\n                    if (!isText) text = new TextDecoder().decode(bufferOrText)\n\n                    const update = !text.includes(srcStr)\n                    if (update) {\n                        text += srcStr\n                        this.info.text.updated = text\n                    }\n\n                    if (!isText) this.#buffer = bufferOrText = new TextEncoder().encode(text)\n                }\n            \n            \n                // Encode into a datauri and/or objecturl\n                const encodings = []\n                const output = this.options.output\n                if (output?.datauri) encodings.push('datauri')\n                if (output?.objecturl) encodings.push('objecturl')\n                for (let i in encodings) {\n                    const encoding = encodings[i]\n\n                    const encodedInfo = await encode[encoding](bufferOrText, this.url, mimeType)\n\n                    if (encodedInfo) {\n                        this.result = encodedInfo.module\n                        this.encodings[encoding] = await encodedInfo.encoded\n                    }\n                }\n\n                const encoded = (this.bundler === 'objecturl') ? this.encodings.objecturl : this.encodings.datauri\n\n                // Updating dependencies\n                // const promises = Array.from(this.dependents.values()).map(dep => dep.updateDependency(this, encoded))\n                // await Promise.all(promises)\n\n                resolve(encoded)\n            } catch (e) {\n                reject(e)\n            }\n        })\n\n        return this.promises.encoded.promise\n    }\n\n    delete = () => {\n        if (this.objecturl) window.URL.revokeObjectURL(this.objecturl);\n    }\n\n    // ------------------- Dependency Management ------------------- //\n    addDependency = (o) => {\n\n        let foundCircular = false\n        if (this.dependents.has(o.url)) foundCircular = true\n        this.dependencies.set(o.url, o)\n        if (o.dependencies.has(this.url)) foundCircular = true \n        o.dependents.set(this.url, this)\n\n        // Abort for circular references before waiting\n        if(foundCircular) {\n            this.circular(o)\n            o.circular(this)\n        }\n    }\n\n    removeDependency = (o) => {\n        this.dependencies.delete(o.name)\n        o.dependents.delete(this.name)\n    }\n\n    updateDependency = async (o, encoding) => {\n        const infoArr = this.imports[o.url]\n        infoArr.forEach(info => this.updateImport(info, encoding))\n    }\n\n    // ------------------- Additional Helpers ------------------- //\n    updateCollection = (collection) => {\n        if (!collection) {\n            this.collection = this.options.collection = Object.keys(globalThis.REMOTEESM_BUNDLES).length\n        } else this.collection = collection\n    }\n\n    // ------------------- Download Bundle ------------------- //\n    download = async (path=this.filename) => {\n\n        if (this.bundler != 'datauri') await this.setBundler('datauri') // ensure that you can download\n\n        // Convert to ObjectURL\n        const mime = this.encodings.datauri.split(',')[0].split(':')[1].split(';')[0];\n        const binary = atob(this.encodings.datauri.split(',')[1]);\n        const array = [];\n        for (var i = 0; i < binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n        }\n\n        const buffer = new Uint8Array(array)\n        const blob = new Blob([buffer], {type: mime});\n        const objecturl = URL.createObjectURL(blob)\n\n        // Download to your filesystem\n        if (globalThis.REMOTEESM_NODE){\n            await polyfills.ready\n            globalThis.fs.writeFileSync(path, buffer)\n            console.log(`Wrote bundle contents to ${path}`)\n        } \n        \n        // Download from the browser\n        else {\n\n            // Download on the Browser\n            var a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.style = \"display: none\";\n            a.href = objecturl;\n            a.download = path;\n            a.click();\n        }\n    }\n\n    // ------------------- Handle Circular References ------------------- //\n    circular = async (o) => {\n        this.options._esmpile.circular.add(this.url) // add self\n\n        const result = await this.resolve().catch((e) => {\n            console.warn(`Circular dependency detected: Fallback to direct import for ${this.url} failed...`, e)\n            const message = `Circular dependency cannot be resolved: ${this.uri} <-> ${o.uri}.`\n            throw new Error(message)\n        })\n\n        console.warn(`Circular dependency detected: Fallback to direct import for ${this.url} was successful!`, result)\n    }\n\n    resolve = async (uri=this.uri) => {\n\n        // resetting resolution variables\n        this.status = 'resolving'\n        this.result = undefined\n        this.encoded = undefined\n\n        // define result promise\n\n        this.result = this.promises.result.promise = new Promise(async (resolve, reject) => {\n\n            this.promises.result.reject = reject\n            this.promises.result.resolve = resolve\n\n            let result;\n\n            const isCircular = this.options._esmpile.circular.has(this.url)\n            let isDirect = isCircular || !this.derived.compile\n\n            try {\n\n                // ------------------- Direct Import ------------------- \n                result = (isDirect) ? await this.import().catch(async e => {\n                    if (this.#options.fallback === false) throw e\n                    else await this.setBundler('objecturl') // fallback to objecturl\n                }) : undefined // try to import natively\n\n                // -------------------Text Compilation ------------------- \n                try {\n                    if (!result) {\n                        if (isCircular) throw new Error(`Failed to import ${this.url} natively.`)\n                        else result = await this.compile() // fallback to text compilation\n                    }\n                } \n                \n                // Handle Resolution Errors\n                catch (e) {\n\n                    if (e) {\n                        if (this.options.fetch?.signal?.aborted) throw e\n\n                        // TODO: Can use these as defaults\n                        else {\n                            const noBase = pathUtils.absolute(uri) ? pathUtils.noBase(uri, this.options, true) : pathUtils.noBase(this.url, this.options, true)\n                            console.warn(`Failed to fetch ${uri}. Checking filesystem references...`);\n                            const filesystemFallback = this.options.filesystem?._fallbacks?.[noBase];\n                            if (filesystemFallback) {\n                                console.warn(`Got fallback reference (module only) for ${uri}.`);\n                                result = filesystemFallback;\n                                throw new Error('Fallbacks are broken...')\n                                // Object.defineProperty(info, 'fallback', { value: true, enumerable: false })\n                            } else {\n                                const middle = \"was not resolved locally. You can provide a direct reference to use in\";\n                                if (e.message.includes(middle)) throw e;\n                                else throw errors.create(uri, noBase);\n                            }\n                        }\n                    }\n                }\n\n                await this.encoded // ensure properly encoded\n                this.status = 'success'\n                this.notify(this)\n\n                resolve(result)\n            } catch (e) {\n                this.status = 'failed'               \n                 this.notify(null, e)\n                reject(e)\n            }\n        })\n\n        // Forward promise...\n        return this.result\n    }\n\n    sources = async () => await sourceMap.get(this.#url, this.#options, this.info.text.original)\n}", "import * as datauriEncoder from './datauri.js'\nimport * as objecturlEncoder from './objecturl.js'\n\nimport * as pathUtils from \"../path.js\";\nimport * as load from \"../load.js\";\nimport * as mimeTypes from '../mimeTypes.js'\n\nexport const datauri = async (...args) => await get(datauriEncoder.get, ...args)\nexport const objecturl = async (...args) => await get(objecturlEncoder.get, ...args)\n\nconst importEncoded = async (uri, isJSON) => await ((isJSON) ? import(uri, { assert: { type: \"json\" } }) : import(uri)).catch((e) => {\n    throw e\n});\n\nasync function get(encoder, input, uriForExtension, mimeType) {\n    \n    let encoded, module\n    if (!mimeType){\n        const pathExt = pathUtils.extension(uriForExtension)\n        mimeType = mimeTypes.get(pathExt)\n    }\n\n    let isJSON = mimeType === 'application/json'\n    \n    try {\n        encoded = encoder(input, mimeType);\n        module = await importEncoded(encoded, isJSON) // check if datauri will work to be imported. Otherwise try different methods and flag for import replacement\n    }\n\n    // Handle Exceptions\n    catch (e) {\n        encoded = encoder(input, mimeType, true);\n        if (mimeTypes.isJS(mimeType)) module = encoded = await catchFailedModule(encoded, e).catch((e) => {\n            // console.error('Failed to load module', path, info, e)\n            throw e\n        }); // javascript script tag imports\n        else module = encoded // audio / video assets\n    }\n\n    return {\n        encoded,\n        module\n    }\n}\n\nasync function catchFailedModule (uri, e){\n    if (\n        e.message.includes('The string to be encoded contains characters outside of the Latin1 range.') // cannot be represented as a datauri\n        || e.message.includes('Cannot set properties of undefined') // will not appropriately load to the window\n    ) return await load.script(uri)\n    else throw e\n}", "import { js } from '../mimeTypes.js'\n\nfunction _arrayBufferToBase64(buffer) {\n    let binary = '';\n    const bytes = new Uint8Array(buffer);\n    const len = bytes.byteLength;\n    for (let i = 0; i < len; i++) {\n        binary += String.fromCharCode(bytes[i]);\n    }\n    return window.btoa(binary);\n}\n\n\nexport const get = (o, mimeType = js, safe = false) => {\n    const method = (typeof o === 'string') ? 'text' : 'buffer'\n    const base64 = (method === 'buffer') ? _arrayBufferToBase64(o) : btoa((safe) ? unescape(encodeURIComponent(o)) : o)\n    return `data:${mimeType};base64,` + base64\n}", "import { js } from '../mimeTypes.js'\n\nexport function get(input, mimeType = js) {\n    if (typeof input === 'string') input = new TextEncoder().encode(input);\n    const blob = new Blob([input], { type: mimeType })\n    return URL.createObjectURL(blob)\n}", "const tsconfig = {\n    compilerOptions: {\n        \"target\": \"ES2015\",\n        \"module\": \"ES2020\",\n        \"strict\": false,\n        \"esModuleInterop\": true\n    }\n}\n\nexport const typescript = (response, type = \"text\") => {\n    if (window.ts) {\n        const tsCode = (type !== 'buffer') ? response[type].updated : new TextDecoder().decode(response[type]);\n        response.text.updated = window.ts.transpile(tsCode, tsconfig.compilerOptions);\n        if (type === 'buffer') {\n            response.buffer = new TextEncoder().encode(response.text.updated); // encode to buffer\n            return response.buffer\n        } else return response.text.updated\n    } else throw new Error('Must load TypeScript extension to compile TypeScript files using remoteESM.load.script(...);')\n\n}", "// Node Polyfills\n\nexport let fetch;\nexport let fs;\nexport let Blob;\n\nconst isReady = new Promise(async (resolve, reject) => {\n\n    try {\n        if (typeof process === 'object') { //indicates node\n\n            // Fetch\n            if (!fetch) {\n                globalThis.REMOTEESM_NODE = true\n                fetch = globalThis.fetch = (await import('node-fetch')).default\n                if (typeof globalThis.fetch !== 'function') globalThis.fetch = fetch\n            }\n            // FS\n            if (!fs) fs = globalThis.fs = (await import('fs')).default\n\n            // Blob\n            if (!Blob) {\n                const buffer = (await import('node:buffer')).default\n                Blob = globalThis.Blob = buffer.Blob\n            }\n            resolve(true)\n        } else resolve(true)\n\n    } catch (err) {\n        reject(err)\n    }\n})\n\nexport const ready = isReady", "export const keySeparator = '.'\n\nexport const defaultPath = 'default'\n\nexport const esSourceKey = '__esmpileSourceBundle'\n\nexport const isPrivate = (key) => false //key[0] === '_' // No private keys\n\n\nexport const specialKeys = {\n\n    start: '__connected', // asked to start\n    stop: '__disconnected',\n    connected: '__ready', // wait until connected\n\n    hierarchy: '__children',\n    element: '__element',\n    webcomponents: '__define',\n    attributes: '__attributes',\n\n    listeners: {\n        value: '__listeners',\n        branch: '__branch',\n        bind: '__bind',\n        trigger: '__trigger',\n        format: '__format',\n    },\n\n    trigger: '__trigger',\n    compose: '__compose',\n\n    uri: '__src',\n    reference: '__object',\n\n    childPosition: '__childposition',\n\n    attribute: 'escomponent',\n    options: '__options',\n\n    parent: '__parent',\n    component: '__component',\n\n    source: '__source',\n    path: '__path',\n\n    animate: '__animate',\n    states: '__states',\n\n    promise: '__childresolved',\n    editor: '__editor',\n\n    flow: '__manager',\n\n    original: '__original',\n\n    resize: '__onresize',    \n    \n\n    proxy: '__proxy'\n}\n", "\n\n      //we can't circularly export a namespace for index.ts so this is the intermediary\n      //import * as bundle from './x' then set globalThis[key] = bundle; The only other option is dynamic importing or a bigger bundler with more of these features built in\n      \n      export * from '../src/index' //still works in esm, getting out of .temp\n      \n      //this takes all of the re-exported modules in index.ts and contains them in an object\n      import * as bundle from '../src/index' // getting out of .temp\n      \n      //webpack? i.e. set the bundled index.ts modules to be globally available? \n      // You can set many modules and assign more functions etc. to the same globals without error\n      \n      //globals are not declared by default in browser scripts, these files are function scopes!\n\n    \n         \n          if(typeof globalThis['esm'] !== 'undefined') \n            Object.assign(globalThis['esm'],bundle); //we can keep assigning the same namespaces more module objects without error!\n          else \n            globalThis['esm'] = bundle;\n        "],
  "mappings": "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",
  "names": ["src_exports", "__export", "Bundle", "Bundle_exports", "compile", "src_default", "load_exports", "nodeModules_exports", "path", "resolve", "sourceMap_exports", "path_exports", "__export", "absolute", "base", "extension", "get", "noBase", "pathId", "url", "js", "isJS", "type", "map", "get", "extension", "defaults_default", "urlSep", "get", "path", "rel", "keepRelativeImports", "isDirectory", "url", "prefix", "getPrefix", "str", "v", "dirTokens", "potentialFile", "splitPath", "extensionTokens", "i", "newPath", "absolute", "uri", "urlWorks", "absolutePath", "isRemote", "extension", "ext", "map", "base", "noBase", "opts", "removeNode", "relativeTo", "defaults_default", "nodeModulePath", "pathId", "nodeModules_exports", "__export", "getMainPath", "path", "resolve", "transformation", "path", "opts", "nodeModules", "defaults_default", "relativeTo", "get", "resolve", "uri", "absoluteNodeModules", "split", "base", "extension", "getMainPath", "e", "getPath", "str", "getPackagePath", "pkg", "getPackage", "destination", "pkgPath", "url", "transformation", "sourceMap_exports", "__export", "get", "extensionTransformations", "allTransformations", "transformation", "get", "uri", "pathExt", "extension", "abs", "absolute", "baseNodeModule", "noExt", "mapped", "ext", "middle", "create", "uri", "key", "noExtension", "path", "repExt", "absolutePath", "absolute", "split", "ext", "extension", "transformation", "opts", "force", "type", "e", "create", "noBase", "getURL", "path", "url", "get", "handleFetch", "options", "progressCallback", "info", "fetchRemote", "type", "additionalArgs", "pathId", "noBase", "response", "bytesReceived", "buffer", "bytes", "hasProgressFunction", "resolve", "reader", "processBuffer", "done", "value", "config", "ab", "chunk", "output", "status", "enc", "get", "uri", "opts", "expectedType", "info", "absPath", "fetchInfo", "handleFetch", "response", "mimeType", "find", "callback", "transArray", "ext", "name", "warning", "e", "transformed", "transformation", "correctURI", "res", "findModule", "isJSON", "extension", "findText", "sourceReg", "get", "uri", "opts", "text", "evaluate", "srcMap", "getMap", "loc", "newText", "outInfo", "load_exports", "__export", "script", "uri", "resolve", "reject", "r", "Bundle_exports", "__export", "Bundle", "get", "encode_exports", "__export", "datauri", "objecturl", "_arrayBufferToBase64", "buffer", "binary", "bytes", "len", "i", "get", "o", "mimeType", "js", "safe", "base64", "get", "input", "mimeType", "js", "blob", "datauri", "args", "get", "objecturl", "importEncoded", "uri", "isJSON", "e", "encoder", "input", "uriForExtension", "mimeType", "encoded", "module", "pathExt", "extension", "isJS", "catchFailedModule", "script", "tsconfig", "typescript", "response", "type", "tsCode", "fetch", "fs", "Blob", "isReady", "resolve", "reject", "buffer", "err", "ready", "esSourceKey", "global", "noEncoding", "toWait", "waitedFor", "esSourceString", "bundle", "esSourceKey", "re", "get", "url", "opts", "pathId", "ref", "Bundle", "promiseInfo", "#url", "ESMPileInternalOpts", "absolute", "#options", "#bundler", "bundler", "output", "setInfo", "innerInfo", "lastBundleType", "isSame", "entrypoint", "entries", "_", "entry", "#name", "name", "collection", "components", "#collection", "#text", "#buffer", "text", "e", "buffer", "drill", "target", "options", "info", "findModule", "ready", "findText", "imports", "original", "prefix", "command", "delimiters", "path", "wildcard", "variables", "absNode", "promises", "i", "encoded", "newImport", "exportDefault", "splitVars", "str", "insertVariable", "variable", "end", "correctPath", "done", "failed", "isDone", "isFailed", "type", "isText", "resolve", "reject", "bufferOrText", "pathExt", "extension", "mimeType", "typescript", "js", "srcStr", "encodings", "encoding", "encodedInfo", "encode_exports", "o", "foundCircular", "mime", "binary", "array", "blob", "objecturl", "a", "result", "message", "uri", "isCircular", "isDirect", "noBase", "filesystemFallback", "middle", "create", "resolve", "get", "path", "path_exports", "Bundle", "compile", "uri", "opts", "thisBundle", "src_default", "src_exports"]
}
